;; Build the stage3 version of Menhir, based on a parser generated by the
;; stage2 version of Menhir.

;; The following stanza binds the name "menhir" to the stage2 version of Menhir
;; so that the "menhir" stanzas will use that executable.

(env
 (_ (binaries ../stage2/main.exe (../stage2/main.exe as menhir))))

;; Most of the rules are shared with the stage2 version.

(include ../stage2/dune.menhir)

;; The following files are necessary for the rules in the above file.

(copy_files ../stage2/menhir_flags)
(copy_files ../stage2/parser.mly)
(copy_files ../stage2/*.messages)
(copy_files ../stage2/Driver.ml)

;; ----------------------------------------------------------------------------

;; The "bootstrap" check verifies that Menhir can identically regenerate its own
;; parser. Compares the generated [Parser] modules generated by the stage1 and
;; stage2 versions, and fails if they are not identical.

;; The parsers contain line directives which are necessarily different because
;; they were generated in different directories. To avoid the comparison below
;; to fail due to these differences, we use a helper script to remove the
;; "filename" part of the line directives. The first rule applies the script to
;; the stage2 parser, The second one to the stage3 parser.

(rule
 (with-stdout-to parser.stage2.ml
                 (run anon/anon.exe %{dep:../stage2/parser.ml})))

(rule
 (with-stdout-to parser.stage3.ml
                 (run anon/anon.exe %{dep:parser.ml})))

(rule
 (alias bootstrap)
 (action
  (progn
    (diff parser.stage2.ml parser.stage3.ml)
    (diff ../stage2/parser.mli parser.mli))))
