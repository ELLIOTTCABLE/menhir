;; Build the stage2 version of Menhir, based on a parser generated by the
;; stage1 version of Menhir.

;; The following stanza binds the name "menhir" to "src/stage1/main.exe" within
;; the present scope. This is so that "menhir" stanzas below will use *that*
;; executable instead of the "menhir" installed in the developer's machine (if
;; any).

(env
 (_ (binaries ../stage1/main.exe (../stage1/main.exe as menhir))))

;; Most of the rules are shared with the stage3 build, so they are put in a
;; separate file and included here. Common flags for Menhir are found in the
;; "menhir_flags" file.

(include dune.menhir)

;; ------------------------------------------------------------------------------

;; Generate a file "parserMessages.auto.messages" with a list of all potential
;; error messages. This can be used as a starting point for writing your own
;; ".messages" file, and also used in the "completness check" (see below).

(rule
 (with-stdout-to parserMessages.auto.messages
                 (run menhir
                      %{read-lines:menhir_flags} %{dep:parser.mly}
                      --list-errors)))

;; Check that all error messages are listed in the ".messages" file. It compares
;; the ".messages" file with that generated by Menhir using the above rule.

(rule
 (alias completeness-check)
 (action (run menhir
              %{read-lines:menhir_flags} %{dep:parser.mly}
              --compare-errors %{dep:parserMessages.auto.messages}
              --compare-errors %{dep:parserMessages.messages})))

;; Update an existing ".messages" file with any missing error messages. An
;; auxiliary rule is used to remove the comments from the Menhir generated file.

(rule
 (with-stdout-to parserMessages.messages.updated
                 (run menhir
                      %{read-lines:menhir_flags}
                      --update-errors %{dep:parserMessages.messages}
                      %{dep:parser.mly})))

(rule
 (with-stdout-to parserMessages.messages.updated.stripped
                 (run sed -e /^##/d %{dep:parserMessages.messages.updated})))

(rule
 (alias update-messages)
 (action (diff parserMessages.messages
               parserMessages.messages.updated.stripped)))

;; ------------------------------------------------------------------------------

;; Install the Menhir executable under the "menhir" name. This is typicaly
;; achieved by adding a "public_name" field in the stanza specifying the
;; executable (found in "dune.menhir" file). However we cannot do that here
;; because the public name "menhir" would clash with the binding of this name to
;; the stage1 version of Menhir at the top of this file. Thus, we explicitly
;; declare its installation as follows.

(install
 (section bin)
 (package menhir)
 (files (./main.exe as menhir)))
