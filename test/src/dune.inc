(rule (target JSParse.opp.out) (deps ../good/JSParse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias JSParse)
 (action (diff ../good/JSParse.opp.exp JSParse.opp.out)))
(rule (target JSParse.out) (deps ../good/JSParse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias JSParse) (action (diff ../good/JSParse.exp JSParse.out)))
(rule (target K3Parser.opp.out) (deps ../good/K3Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias K3Parser)
 (action (diff ../good/K3Parser.opp.exp K3Parser.opp.out)))
(rule (target K3Parser.out) (deps ../good/K3Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias K3Parser) (action (diff ../good/K3Parser.exp K3Parser.out)))
(rule (target KaSim.4.0.0-kappaParser.opp.out)
 (deps ../good/KaSim.4.0.0-kappaParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias KaSim.4.0.0-kappaParser)
 (action
  (diff ../good/KaSim.4.0.0-kappaParser.opp.exp
   KaSim.4.0.0-kappaParser.opp.out)))
(rule (target KaSim.4.0.0-kappaParser.out)
 (deps ../good/KaSim.4.0.0-kappaParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias KaSim.4.0.0-kappaParser)
 (action
  (diff ../good/KaSim.4.0.0-kappaParser.exp KaSim.4.0.0-kappaParser.out)))
(rule (target KaSim.4.0.0-kparser4.opp.out)
 (deps ../good/KaSim.4.0.0-kparser4.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias KaSim.4.0.0-kparser4)
 (action
  (diff ../good/KaSim.4.0.0-kparser4.opp.exp KaSim.4.0.0-kparser4.opp.out)))
(rule (target KaSim.4.0.0-kparser4.out)
 (deps ../good/KaSim.4.0.0-kparser4.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias KaSim.4.0.0-kparser4)
 (action (diff ../good/KaSim.4.0.0-kparser4.exp KaSim.4.0.0-kparser4.out)))
(rule (target albatross.opp.out) (deps ../good/albatross.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias albatross)
 (action (diff ../good/albatross.opp.exp albatross.opp.out)))
(rule (target albatross.out) (deps ../good/albatross.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias albatross) (action (diff ../good/albatross.exp albatross.out)))
(rule (target alphaCaml.opp.out) (deps ../good/alphaCaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias alphaCaml)
 (action (diff ../good/alphaCaml.opp.exp alphaCaml.opp.out)))
(rule (target alphaCaml.out) (deps ../good/alphaCaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias alphaCaml) (action (diff ../good/alphaCaml.exp alphaCaml.out)))
(rule (target alphaCaml-demos-interactive.opp.out)
 (deps ../good/alphaCaml-demos-interactive.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias alphaCaml-demos-interactive)
 (action
  (diff ../good/alphaCaml-demos-interactive.opp.exp
   alphaCaml-demos-interactive.opp.out)))
(rule (target alphaCaml-demos-interactive.out)
 (deps ../good/alphaCaml-demos-interactive.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias alphaCaml-demos-interactive)
 (action
  (diff ../good/alphaCaml-demos-interactive.exp
   alphaCaml-demos-interactive.out)))
(rule (target alphaCaml-demos-mixins.opp.out)
 (deps ../good/alphaCaml-demos-mixins.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias alphaCaml-demos-mixins)
 (action
  (diff ../good/alphaCaml-demos-mixins.opp.exp
   alphaCaml-demos-mixins.opp.out)))
(rule (target alphaCaml-demos-mixins.out)
 (deps ../good/alphaCaml-demos-mixins.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias alphaCaml-demos-mixins)
 (action
  (diff ../good/alphaCaml-demos-mixins.exp alphaCaml-demos-mixins.out)))
(rule (target alphaCaml-demos-poplmark.opp.out)
 (deps ../good/alphaCaml-demos-poplmark.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias alphaCaml-demos-poplmark)
 (action
  (diff ../good/alphaCaml-demos-poplmark.opp.exp
   alphaCaml-demos-poplmark.opp.out)))
(rule (target alphaCaml-demos-poplmark.out)
 (deps ../good/alphaCaml-demos-poplmark.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias alphaCaml-demos-poplmark)
 (action
  (diff ../good/alphaCaml-demos-poplmark.exp alphaCaml-demos-poplmark.out)))
(rule (target alphaprolog.opp.out) (deps ../good/alphaprolog.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias alphaprolog)
 (action (diff ../good/alphaprolog.opp.exp alphaprolog.opp.out)))
(rule (target alphaprolog.out) (deps ../good/alphaprolog.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias alphaprolog)
 (action (diff ../good/alphaprolog.exp alphaprolog.out)))
(rule (target amalthea.opp.out) (deps ../good/amalthea.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias amalthea)
 (action (diff ../good/amalthea.opp.exp amalthea.opp.out)))
(rule (target amalthea.out) (deps ../good/amalthea.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias amalthea) (action (diff ../good/amalthea.exp amalthea.out)))
(rule (target anonymous.opp.out) (deps ../good/anonymous.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias anonymous)
 (action (diff ../good/anonymous.opp.exp anonymous.opp.out)))
(rule (target anonymous.out) (deps ../good/anonymous.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias anonymous) (action (diff ../good/anonymous.exp anonymous.out)))
(rule (target anonymous-nested.opp.out) (deps ../good/anonymous-nested.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias anonymous-nested)
 (action (diff ../good/anonymous-nested.opp.exp anonymous-nested.opp.out)))
(rule (target anonymous-nested.out) (deps ../good/anonymous-nested.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias anonymous-nested)
 (action (diff ../good/anonymous-nested.exp anonymous-nested.out)))
(rule (target anonymous-param.opp.out) (deps ../good/anonymous-param.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias anonymous-param)
 (action (diff ../good/anonymous-param.opp.exp anonymous-param.opp.out)))
(rule (target anonymous-param.out) (deps ../good/anonymous-param.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias anonymous-param)
 (action (diff ../good/anonymous-param.exp anonymous-param.out)))
(rule (target anonymous-param-redundant.opp.out)
 (deps ../good/anonymous-param-redundant.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias anonymous-param-redundant)
 (action
  (diff ../good/anonymous-param-redundant.opp.exp
   anonymous-param-redundant.opp.out)))
(rule (target anonymous-param-redundant.out)
 (deps ../good/anonymous-param-redundant.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias anonymous-param-redundant)
 (action
  (diff ../good/anonymous-param-redundant.exp anonymous-param-redundant.out)))
(rule (target apron.20160125-apron_parser.opp.out)
 (deps ../good/apron.20160125-apron_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias apron.20160125-apron_parser)
 (action
  (diff ../good/apron.20160125-apron_parser.opp.exp
   apron.20160125-apron_parser.opp.out)))
(rule (target apron.20160125-apron_parser.out)
 (deps ../good/apron.20160125-apron_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias apron.20160125-apron_parser)
 (action
  (diff ../good/apron.20160125-apron_parser.exp
   apron.20160125-apron_parser.out)))
(rule (target atd_parser.opp.out) (deps ../good/atd_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias atd_parser)
 (action (diff ../good/atd_parser.opp.exp atd_parser.opp.out)))
(rule (target atd_parser.out) (deps ../good/atd_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias atd_parser)
 (action (diff ../good/atd_parser.exp atd_parser.out)))
(rule (target attapl-deptypes.opp.out) (deps ../good/attapl-deptypes.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias attapl-deptypes)
 (action (diff ../good/attapl-deptypes.opp.exp attapl-deptypes.opp.out)))
(rule (target attapl-deptypes.out) (deps ../good/attapl-deptypes.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias attapl-deptypes)
 (action (diff ../good/attapl-deptypes.exp attapl-deptypes.out)))
(rule (target attapl-mini.opp.out) (deps ../good/attapl-mini.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias attapl-mini)
 (action (diff ../good/attapl-mini.opp.exp attapl-mini.opp.out)))
(rule (target attapl-mini.out) (deps ../good/attapl-mini.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias attapl-mini)
 (action (diff ../good/attapl-mini.exp attapl-mini.out)))
(rule (target attributes.opp.out) (deps ../good/attributes.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias attributes)
 (action (diff ../good/attributes.opp.exp attributes.opp.out)))
(rule (target attributes.out) (deps ../good/attributes.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias attributes)
 (action (diff ../good/attributes.exp attributes.out)))
(rule (target attributes-expansion.opp.out)
 (deps ../good/attributes-expansion.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias attributes-expansion)
 (action
  (diff ../good/attributes-expansion.opp.exp attributes-expansion.opp.out)))
(rule (target attributes-expansion.out)
 (deps ../good/attributes-expansion.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias attributes-expansion)
 (action (diff ../good/attributes-expansion.exp attributes-expansion.out)))
(rule (target bamboo.0.0.03-parser.opp.out)
 (deps ../good/bamboo.0.0.03-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bamboo.0.0.03-parser)
 (action
  (diff ../good/bamboo.0.0.03-parser.opp.exp bamboo.0.0.03-parser.opp.out)))
(rule (target bamboo.0.0.03-parser.out)
 (deps ../good/bamboo.0.0.03-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bamboo.0.0.03-parser)
 (action (diff ../good/bamboo.0.0.03-parser.exp bamboo.0.0.03-parser.out)))
(rule (target bare-bones.opp.out) (deps ../good/bare-bones.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bare-bones)
 (action (diff ../good/bare-bones.opp.exp bare-bones.opp.out)))
(rule (target bare-bones.out) (deps ../good/bare-bones.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bare-bones)
 (action (diff ../good/bare-bones.exp bare-bones.out)))
(rule (target batsh.0.0.6-parser_yacc.opp.out)
 (deps ../good/batsh.0.0.6-parser_yacc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias batsh.0.0.6-parser_yacc)
 (action
  (diff ../good/batsh.0.0.6-parser_yacc.opp.exp
   batsh.0.0.6-parser_yacc.opp.out)))
(rule (target batsh.0.0.6-parser_yacc.out)
 (deps ../good/batsh.0.0.6-parser_yacc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias batsh.0.0.6-parser_yacc)
 (action
  (diff ../good/batsh.0.0.6-parser_yacc.exp batsh.0.0.6-parser_yacc.out)))
(rule (target bauer.opp.out) (deps ../good/bauer.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bauer) (action (diff ../good/bauer.opp.exp bauer.opp.out)))
(rule (target bauer.out) (deps ../good/bauer.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bauer) (action (diff ../good/bauer.exp bauer.out)))
(rule (target belloeil.opp.out) (deps ../good/belloeil.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias belloeil)
 (action (diff ../good/belloeil.opp.exp belloeil.opp.out)))
(rule (target belloeil.out) (deps ../good/belloeil.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias belloeil) (action (diff ../good/belloeil.exp belloeil.out)))
(rule (target bibtex2html.1.99-bibtex_parser.opp.out)
 (deps ../good/bibtex2html.1.99-bibtex_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bibtex2html.1.99-bibtex_parser)
 (action
  (diff ../good/bibtex2html.1.99-bibtex_parser.opp.exp
   bibtex2html.1.99-bibtex_parser.opp.out)))
(rule (target bibtex2html.1.99-bibtex_parser.out)
 (deps ../good/bibtex2html.1.99-bibtex_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bibtex2html.1.99-bibtex_parser)
 (action
  (diff ../good/bibtex2html.1.99-bibtex_parser.exp
   bibtex2html.1.99-bibtex_parser.out)))
(rule (target bibtex_parser.opp.out) (deps ../good/bibtex_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bibtex_parser)
 (action (diff ../good/bibtex_parser.opp.exp bibtex_parser.opp.out)))
(rule (target bibtex_parser.out) (deps ../good/bibtex_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bibtex_parser)
 (action (diff ../good/bibtex_parser.exp bibtex_parser.out)))
(rule (target bison-mysterious-conflict.opp.out)
 (deps ../good/bison-mysterious-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bison-mysterious-conflict)
 (action
  (diff ../good/bison-mysterious-conflict.opp.exp
   bison-mysterious-conflict.opp.out)))
(rule (target bison-mysterious-conflict.out)
 (deps ../good/bison-mysterious-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bison-mysterious-conflict)
 (action
  (diff ../good/bison-mysterious-conflict.exp bison-mysterious-conflict.out)))
(rule (target bodin.opp.out) (deps ../good/bodin.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bodin) (action (diff ../good/bodin.opp.exp bodin.opp.out)))
(rule (target bodin.out) (deps ../good/bodin.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bodin) (action (diff ../good/bodin.exp bodin.out)))
(rule (target bodin_inlined.opp.out) (deps ../good/bodin_inlined.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bodin_inlined)
 (action (diff ../good/bodin_inlined.opp.exp bodin_inlined.opp.out)))
(rule (target bodin_inlined.out) (deps ../good/bodin_inlined.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bodin_inlined)
 (action (diff ../good/bodin_inlined.exp bodin_inlined.out)))
(rule (target boomerang.1.1.0-bparser.opp.out)
 (deps ../good/boomerang.1.1.0-bparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias boomerang.1.1.0-bparser)
 (action
  (diff ../good/boomerang.1.1.0-bparser.opp.exp
   boomerang.1.1.0-bparser.opp.out)))
(rule (target boomerang.1.1.0-bparser.out)
 (deps ../good/boomerang.1.1.0-bparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias boomerang.1.1.0-bparser)
 (action
  (diff ../good/boomerang.1.1.0-bparser.exp boomerang.1.1.0-bparser.out)))
(rule (target boris-mini.opp.out) (deps ../good/boris-mini.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias boris-mini)
 (action (diff ../good/boris-mini.opp.exp boris-mini.opp.out)))
(rule (target boris-mini.out) (deps ../good/boris-mini.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias boris-mini)
 (action (diff ../good/boris-mini.exp boris-mini.out)))
(rule (target boris-mini-no-eos.opp.out) (deps ../good/boris-mini-no-eos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias boris-mini-no-eos)
 (action (diff ../good/boris-mini-no-eos.opp.exp boris-mini-no-eos.opp.out)))
(rule (target boris-mini-no-eos.out) (deps ../good/boris-mini-no-eos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias boris-mini-no-eos)
 (action (diff ../good/boris-mini-no-eos.exp boris-mini-no-eos.out)))
(rule (target bran.opp.out) (deps ../good/bran.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias bran) (action (diff ../good/bran.opp.exp bran.opp.out)))
(rule (target bran.out) (deps ../good/bran.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias bran) (action (diff ../good/bran.exp bran.out)))
(rule (target c.opp.out) (deps ../good/c.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias c) (action (diff ../good/c.opp.exp c.opp.out)))
(rule (target c.out) (deps ../good/c.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias c) (action (diff ../good/c.exp c.out)))
(rule (target c_unambiguous.opp.out) (deps ../good/c_unambiguous.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias c_unambiguous)
 (action (diff ../good/c_unambiguous.opp.exp c_unambiguous.opp.out)))
(rule (target c_unambiguous.out) (deps ../good/c_unambiguous.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias c_unambiguous)
 (action (diff ../good/c_unambiguous.exp c_unambiguous.out)))
(rule (target calc.opp.out) (deps ../good/calc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias calc) (action (diff ../good/calc.opp.exp calc.opp.out)))
(rule (target calc.out) (deps ../good/calc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias calc) (action (diff ../good/calc.exp calc.out)))
(rule (target calc-anonymous.opp.out) (deps ../good/calc-anonymous.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias calc-anonymous)
 (action (diff ../good/calc-anonymous.opp.exp calc-anonymous.opp.out)))
(rule (target calc-anonymous.out) (deps ../good/calc-anonymous.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias calc-anonymous)
 (action (diff ../good/calc-anonymous.exp calc-anonymous.out)))
(rule (target calc-ast.opp.out) (deps ../good/calc-ast.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias calc-ast)
 (action (diff ../good/calc-ast.opp.exp calc-ast.opp.out)))
(rule (target calc-ast.out) (deps ../good/calc-ast.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias calc-ast) (action (diff ../good/calc-ast.exp calc-ast.out)))
(rule (target calc-locations.opp.out) (deps ../good/calc-locations.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias calc-locations)
 (action (diff ../good/calc-locations.opp.exp calc-locations.opp.out)))
(rule (target calc-locations.out) (deps ../good/calc-locations.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias calc-locations)
 (action (diff ../good/calc-locations.exp calc-locations.out)))
(rule (target calc-never-useful.opp.out) (deps ../good/calc-never-useful.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess
     %{read-lines:../good/calc-never-useful.flags} %{deps})))))
(rule (alias calc-never-useful)
 (action (diff ../good/calc-never-useful.opp.exp calc-never-useful.opp.out)))
(rule (target calc-never-useful.out) (deps ../good/calc-never-useful.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/calc-never-useful.flags} --explain -lg 2
     -la 2 -lc 2 %{deps})))))
(rule (alias calc-never-useful)
 (action (diff ../good/calc-never-useful.exp calc-never-useful.out)))
(rule (target calc-new-syntax.opp.out) (deps ../good/calc-new-syntax.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias calc-new-syntax)
 (action (diff ../good/calc-new-syntax.opp.exp calc-new-syntax.opp.out)))
(rule (target calc-new-syntax.out) (deps ../good/calc-new-syntax.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias calc-new-syntax)
 (action (diff ../good/calc-new-syntax.exp calc-new-syntax.out)))
(rule (target camltemplate.1.0.2-ctParser.opp.out)
 (deps ../good/camltemplate.1.0.2-ctParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias camltemplate.1.0.2-ctParser)
 (action
  (diff ../good/camltemplate.1.0.2-ctParser.opp.exp
   camltemplate.1.0.2-ctParser.opp.out)))
(rule (target camltemplate.1.0.2-ctParser.out)
 (deps ../good/camltemplate.1.0.2-ctParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias camltemplate.1.0.2-ctParser)
 (action
  (diff ../good/camltemplate.1.0.2-ctParser.exp
   camltemplate.1.0.2-ctParser.out)))
(rule (target camomile.1.0.1-colParser.opp.out)
 (deps ../good/camomile.1.0.1-colParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias camomile.1.0.1-colParser)
 (action
  (diff ../good/camomile.1.0.1-colParser.opp.exp
   camomile.1.0.1-colParser.opp.out)))
(rule (target camomile.1.0.1-colParser.out)
 (deps ../good/camomile.1.0.1-colParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias camomile.1.0.1-colParser)
 (action
  (diff ../good/camomile.1.0.1-colParser.exp camomile.1.0.1-colParser.out)))
(rule (target ccss.1.6-parser.opp.out) (deps ../good/ccss.1.6-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ccss.1.6-parser)
 (action (diff ../good/ccss.1.6-parser.opp.exp ccss.1.6-parser.opp.out)))
(rule (target ccss.1.6-parser.out) (deps ../good/ccss.1.6-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ccss.1.6-parser)
 (action (diff ../good/ccss.1.6-parser.exp ccss.1.6-parser.out)))
(rule (target charrua-client.0.9-dhcp_parser.opp.out)
 (deps ../good/charrua-client.0.9-dhcp_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias charrua-client.0.9-dhcp_parser)
 (action
  (diff ../good/charrua-client.0.9-dhcp_parser.opp.exp
   charrua-client.0.9-dhcp_parser.opp.out)))
(rule (target charrua-client.0.9-dhcp_parser.out)
 (deps ../good/charrua-client.0.9-dhcp_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias charrua-client.0.9-dhcp_parser)
 (action
  (diff ../good/charrua-client.0.9-dhcp_parser.exp
   charrua-client.0.9-dhcp_parser.out)))
(rule (target christian.opp.out) (deps ../good/christian.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias christian)
 (action (diff ../good/christian.opp.exp christian.opp.out)))
(rule (target christian.out) (deps ../good/christian.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias christian) (action (diff ../good/christian.exp christian.out)))
(rule (target cigen-cparser.opp.out) (deps ../good/cigen-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cigen-cparser)
 (action (diff ../good/cigen-cparser.opp.exp cigen-cparser.opp.out)))
(rule (target cigen-cparser.out) (deps ../good/cigen-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cigen-cparser)
 (action (diff ../good/cigen-cparser.exp cigen-cparser.out)))
(rule (target cil-cparser.opp.out) (deps ../good/cil-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cil-cparser)
 (action (diff ../good/cil-cparser.opp.exp cil-cparser.opp.out)))
(rule (target cil-cparser.out) (deps ../good/cil-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cil-cparser)
 (action (diff ../good/cil-cparser.exp cil-cparser.out)))
(rule (target cil-formatparse.opp.out) (deps ../good/cil-formatparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cil-formatparse)
 (action (diff ../good/cil-formatparse.opp.exp cil-formatparse.opp.out)))
(rule (target cil-formatparse.out) (deps ../good/cil-formatparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cil-formatparse)
 (action (diff ../good/cil-formatparse.exp cil-formatparse.out)))
(rule (target cime-coq.opp.out) (deps ../good/cime-coq.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-coq)
 (action (diff ../good/cime-coq.opp.exp cime-coq.opp.out)))
(rule (target cime-coq.out) (deps ../good/cime-coq.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-coq) (action (diff ../good/cime-coq.exp cime-coq.out)))
(rule (target cime-genpoly.opp.out) (deps ../good/cime-genpoly.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-genpoly)
 (action (diff ../good/cime-genpoly.opp.exp cime-genpoly.opp.out)))
(rule (target cime-genpoly.out) (deps ../good/cime-genpoly.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-genpoly)
 (action (diff ../good/cime-genpoly.exp cime-genpoly.out)))
(rule (target cime-parameterized-signatures.opp.out)
 (deps ../good/cime-parameterized-signatures.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-parameterized-signatures)
 (action
  (diff ../good/cime-parameterized-signatures.opp.exp
   cime-parameterized-signatures.opp.out)))
(rule (target cime-parameterized-signatures.out)
 (deps ../good/cime-parameterized-signatures.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-parameterized-signatures)
 (action
  (diff ../good/cime-parameterized-signatures.exp
   cime-parameterized-signatures.out)))
(rule (target cime-poly.opp.out) (deps ../good/cime-poly.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-poly)
 (action (diff ../good/cime-poly.opp.exp cime-poly.opp.out)))
(rule (target cime-poly.out) (deps ../good/cime-poly.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-poly) (action (diff ../good/cime-poly.exp cime-poly.out)))
(rule (target cime-poly-interp.opp.out) (deps ../good/cime-poly-interp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-poly-interp)
 (action (diff ../good/cime-poly-interp.opp.exp cime-poly-interp.opp.out)))
(rule (target cime-poly-interp.out) (deps ../good/cime-poly-interp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-poly-interp)
 (action (diff ../good/cime-poly-interp.exp cime-poly-interp.out)))
(rule (target cime-signature.opp.out) (deps ../good/cime-signature.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-signature)
 (action (diff ../good/cime-signature.opp.exp cime-signature.opp.out)))
(rule (target cime-signature.out) (deps ../good/cime-signature.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-signature)
 (action (diff ../good/cime-signature.exp cime-signature.out)))
(rule (target cime-syntax.opp.out) (deps ../good/cime-syntax.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-syntax)
 (action (diff ../good/cime-syntax.opp.exp cime-syntax.opp.out)))
(rule (target cime-syntax.out) (deps ../good/cime-syntax.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-syntax)
 (action (diff ../good/cime-syntax.exp cime-syntax.out)))
(rule (target cime-term.opp.out) (deps ../good/cime-term.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-term)
 (action (diff ../good/cime-term.opp.exp cime-term.opp.out)))
(rule (target cime-term.out) (deps ../good/cime-term.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-term) (action (diff ../good/cime-term.exp cime-term.out)))
(rule (target cime-terms.opp.out) (deps ../good/cime-terms.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-terms)
 (action (diff ../good/cime-terms.opp.exp cime-terms.opp.out)))
(rule (target cime-terms.out) (deps ../good/cime-terms.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-terms)
 (action (diff ../good/cime-terms.exp cime-terms.out)))
(rule (target cime-terms-signature.opp.out)
 (deps ../good/cime-terms-signature.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-terms-signature)
 (action
  (diff ../good/cime-terms-signature.opp.exp cime-terms-signature.opp.out)))
(rule (target cime-terms-signature.out)
 (deps ../good/cime-terms-signature.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-terms-signature)
 (action (diff ../good/cime-terms-signature.exp cime-terms-signature.out)))
(rule (target cime-theory.opp.out) (deps ../good/cime-theory.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-theory)
 (action (diff ../good/cime-theory.opp.exp cime-theory.opp.out)))
(rule (target cime-theory.out) (deps ../good/cime-theory.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-theory)
 (action (diff ../good/cime-theory.exp cime-theory.out)))
(rule (target cime-toplevel.opp.out) (deps ../good/cime-toplevel.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-toplevel)
 (action (diff ../good/cime-toplevel.opp.exp cime-toplevel.opp.out)))
(rule (target cime-toplevel.out) (deps ../good/cime-toplevel.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-toplevel)
 (action (diff ../good/cime-toplevel.exp cime-toplevel.out)))
(rule (target cime-word.opp.out) (deps ../good/cime-word.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cime-word)
 (action (diff ../good/cime-word.opp.exp cime-word.opp.out)))
(rule (target cime-word.out) (deps ../good/cime-word.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cime-word) (action (diff ../good/cime-word.exp cime-word.out)))
(rule (target cminor.opp.out) (deps ../good/cminor.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cminor) (action (diff ../good/cminor.opp.exp cminor.opp.out)))
(rule (target cminor.out) (deps ../good/cminor.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cminor) (action (diff ../good/cminor.exp cminor.out)))
(rule (target cocci.opp.out) (deps ../good/cocci.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cocci) (action (diff ../good/cocci.opp.exp cocci.opp.out)))
(rule (target cocci.out) (deps ../good/cocci.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cocci) (action (diff ../good/cocci.exp cocci.out)))
(rule (target coccinelle.1.0.2-parser_c.opp.out)
 (deps ../good/coccinelle.1.0.2-parser_c.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias coccinelle.1.0.2-parser_c)
 (action
  (diff ../good/coccinelle.1.0.2-parser_c.opp.exp
   coccinelle.1.0.2-parser_c.opp.out)))
(rule (target coccinelle.1.0.2-parser_c.out)
 (deps ../good/coccinelle.1.0.2-parser_c.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias coccinelle.1.0.2-parser_c)
 (action
  (diff ../good/coccinelle.1.0.2-parser_c.exp coccinelle.1.0.2-parser_c.out)))
(rule (target coccinelle.1.0.2-parser_cocci_menhir.opp.out)
 (deps ../good/coccinelle.1.0.2-parser_cocci_menhir.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias coccinelle.1.0.2-parser_cocci_menhir)
 (action
  (diff ../good/coccinelle.1.0.2-parser_cocci_menhir.opp.exp
   coccinelle.1.0.2-parser_cocci_menhir.opp.out)))
(rule (target coccinelle.1.0.2-parser_cocci_menhir.out)
 (deps ../good/coccinelle.1.0.2-parser_cocci_menhir.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias coccinelle.1.0.2-parser_cocci_menhir)
 (action
  (diff ../good/coccinelle.1.0.2-parser_cocci_menhir.exp
   coccinelle.1.0.2-parser_cocci_menhir.out)))
(rule (target coercion-constraint.opp.out)
 (deps ../good/coercion-constraint.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias coercion-constraint)
 (action
  (diff ../good/coercion-constraint.opp.exp coercion-constraint.opp.out)))
(rule (target coercion-constraint.out) (deps ../good/coercion-constraint.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias coercion-constraint)
 (action (diff ../good/coercion-constraint.exp coercion-constraint.out)))
(rule (target coercion-mini.opp.out) (deps ../good/coercion-mini.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias coercion-mini)
 (action (diff ../good/coercion-mini.opp.exp coercion-mini.opp.out)))
(rule (target coercion-mini.out) (deps ../good/coercion-mini.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias coercion-mini)
 (action (diff ../good/coercion-mini.exp coercion-mini.out)))
(rule (target cohttp.1.2.0-accept_parser.opp.out)
 (deps ../good/cohttp.1.2.0-accept_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cohttp.1.2.0-accept_parser)
 (action
  (diff ../good/cohttp.1.2.0-accept_parser.opp.exp
   cohttp.1.2.0-accept_parser.opp.out)))
(rule (target cohttp.1.2.0-accept_parser.out)
 (deps ../good/cohttp.1.2.0-accept_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cohttp.1.2.0-accept_parser)
 (action
  (diff ../good/cohttp.1.2.0-accept_parser.exp
   cohttp.1.2.0-accept_parser.out)))
(rule (target compcert_pre_parser.opp.out)
 (deps ../good/compcert_pre_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias compcert_pre_parser)
 (action
  (diff ../good/compcert_pre_parser.opp.exp compcert_pre_parser.opp.out)))
(rule (target compcert_pre_parser.out) (deps ../good/compcert_pre_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias compcert_pre_parser)
 (action (diff ../good/compcert_pre_parser.exp compcert_pre_parser.out)))
(rule (target compcert_pre_parser_new.opp.out)
 (deps ../good/compcert_pre_parser_new.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess
     %{read-lines:../good/compcert_pre_parser_new.flags} %{deps})))))
(rule (alias compcert_pre_parser_new)
 (action
  (diff ../good/compcert_pre_parser_new.opp.exp
   compcert_pre_parser_new.opp.out)))
(rule (target compcert_pre_parser_new.out)
 (deps ../good/compcert_pre_parser_new.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/compcert_pre_parser_new.flags} --explain
     -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias compcert_pre_parser_new)
 (action
  (diff ../good/compcert_pre_parser_new.exp compcert_pre_parser_new.out)))
(rule (target compsyn.opp.out) (deps ../good/compsyn.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias compsyn)
 (action (diff ../good/compsyn.opp.exp compsyn.opp.out)))
(rule (target compsyn.out) (deps ../good/compsyn.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias compsyn) (action (diff ../good/compsyn.exp compsyn.out)))
(rule (target condition_parser.opp.out) (deps ../good/condition_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias condition_parser)
 (action (diff ../good/condition_parser.opp.exp condition_parser.opp.out)))
(rule (target condition_parser.out) (deps ../good/condition_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias condition_parser)
 (action (diff ../good/condition_parser.exp condition_parser.out)))
(rule (target confluence.opp.out) (deps ../good/confluence.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias confluence)
 (action (diff ../good/confluence.opp.exp confluence.opp.out)))
(rule (target confluence.out) (deps ../good/confluence.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias confluence)
 (action (diff ../good/confluence.exp confluence.out)))
(rule (target confluence-fnf.opp.out) (deps ../good/confluence-fnf.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias confluence-fnf)
 (action (diff ../good/confluence-fnf.opp.exp confluence-fnf.opp.out)))
(rule (target confluence-fnf.out) (deps ../good/confluence-fnf.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias confluence-fnf)
 (action (diff ../good/confluence-fnf.exp confluence-fnf.out)))
(rule (target confluence-psl.opp.out) (deps ../good/confluence-psl.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias confluence-psl)
 (action (diff ../good/confluence-psl.opp.exp confluence-psl.opp.out)))
(rule (target confluence-psl.out) (deps ../good/confluence-psl.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias confluence-psl)
 (action (diff ../good/confluence-psl.exp confluence-psl.out)))
(rule (target couac.opp.out) (deps ../good/couac.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias couac) (action (diff ../good/couac.opp.exp couac.opp.out)))
(rule (target couac.out) (deps ../good/couac.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias couac) (action (diff ../good/couac.exp couac.out)))
(rule (target cppo_ocamlbuild.1.6.0-cppo_parser.opp.out)
 (deps ../good/cppo_ocamlbuild.1.6.0-cppo_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cppo_ocamlbuild.1.6.0-cppo_parser)
 (action
  (diff ../good/cppo_ocamlbuild.1.6.0-cppo_parser.opp.exp
   cppo_ocamlbuild.1.6.0-cppo_parser.opp.out)))
(rule (target cppo_ocamlbuild.1.6.0-cppo_parser.out)
 (deps ../good/cppo_ocamlbuild.1.6.0-cppo_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cppo_ocamlbuild.1.6.0-cppo_parser)
 (action
  (diff ../good/cppo_ocamlbuild.1.6.0-cppo_parser.exp
   cppo_ocamlbuild.1.6.0-cppo_parser.out)))
(rule (target cubicle.1.1.2-parser.opp.out)
 (deps ../good/cubicle.1.1.2-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cubicle.1.1.2-parser)
 (action
  (diff ../good/cubicle.1.1.2-parser.opp.exp cubicle.1.1.2-parser.opp.out)))
(rule (target cubicle.1.1.2-parser.out)
 (deps ../good/cubicle.1.1.2-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cubicle.1.1.2-parser)
 (action (diff ../good/cubicle.1.1.2-parser.exp cubicle.1.1.2-parser.out)))
(rule (target cudf.0.9-cudf_type_parser.opp.out)
 (deps ../good/cudf.0.9-cudf_type_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cudf.0.9-cudf_type_parser)
 (action
  (diff ../good/cudf.0.9-cudf_type_parser.opp.exp
   cudf.0.9-cudf_type_parser.opp.out)))
(rule (target cudf.0.9-cudf_type_parser.out)
 (deps ../good/cudf.0.9-cudf_type_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cudf.0.9-cudf_type_parser)
 (action
  (diff ../good/cudf.0.9-cudf_type_parser.exp cudf.0.9-cudf_type_parser.out)))
(rule (target cutdown.opp.out) (deps ../good/cutdown.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias cutdown)
 (action (diff ../good/cutdown.opp.exp cutdown.opp.out)))
(rule (target cutdown.out) (deps ../good/cutdown.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias cutdown) (action (diff ../good/cutdown.exp cutdown.out)))
(rule (target dario.opp.out) (deps ../good/dario.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias dario) (action (diff ../good/dario.opp.exp dario.opp.out)))
(rule (target dario.out) (deps ../good/dario.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias dario) (action (diff ../good/dario.exp dario.out)))
(rule (target datalog.0.5.2-topDownParser.opp.out)
 (deps ../good/datalog.0.5.2-topDownParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias datalog.0.5.2-topDownParser)
 (action
  (diff ../good/datalog.0.5.2-topDownParser.opp.exp
   datalog.0.5.2-topDownParser.opp.out)))
(rule (target datalog.0.5.2-topDownParser.out)
 (deps ../good/datalog.0.5.2-topDownParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias datalog.0.5.2-topDownParser)
 (action
  (diff ../good/datalog.0.5.2-topDownParser.exp
   datalog.0.5.2-topDownParser.out)))
(rule (target dbforge.2.0.1-sqml_parser.opp.out)
 (deps ../good/dbforge.2.0.1-sqml_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias dbforge.2.0.1-sqml_parser)
 (action
  (diff ../good/dbforge.2.0.1-sqml_parser.opp.exp
   dbforge.2.0.1-sqml_parser.opp.out)))
(rule (target dbforge.2.0.1-sqml_parser.out)
 (deps ../good/dbforge.2.0.1-sqml_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias dbforge.2.0.1-sqml_parser)
 (action
  (diff ../good/dbforge.2.0.1-sqml_parser.exp dbforge.2.0.1-sqml_parser.out)))
(rule (target debian-formats.0.1.1-DF822_parser.opp.out)
 (deps ../good/debian-formats.0.1.1-DF822_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias debian-formats.0.1.1-DF822_parser)
 (action
  (diff ../good/debian-formats.0.1.1-DF822_parser.opp.exp
   debian-formats.0.1.1-DF822_parser.opp.out)))
(rule (target debian-formats.0.1.1-DF822_parser.out)
 (deps ../good/debian-formats.0.1.1-DF822_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias debian-formats.0.1.1-DF822_parser)
 (action
  (diff ../good/debian-formats.0.1.1-DF822_parser.exp
   debian-formats.0.1.1-DF822_parser.out)))
(rule (target dedukti.2.6.0-menhir_parser.opp.out)
 (deps ../good/dedukti.2.6.0-menhir_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias dedukti.2.6.0-menhir_parser)
 (action
  (diff ../good/dedukti.2.6.0-menhir_parser.opp.exp
   dedukti.2.6.0-menhir_parser.opp.out)))
(rule (target dedukti.2.6.0-menhir_parser.out)
 (deps ../good/dedukti.2.6.0-menhir_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias dedukti.2.6.0-menhir_parser)
 (action
  (diff ../good/dedukti.2.6.0-menhir_parser.exp
   dedukti.2.6.0-menhir_parser.out)))
(rule (target diy.5.01-ARMParser.opp.out)
 (deps ../good/diy.5.01-ARMParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias diy.5.01-ARMParser)
 (action
  (diff ../good/diy.5.01-ARMParser.opp.exp diy.5.01-ARMParser.opp.out)))
(rule (target diy.5.01-ARMParser.out) (deps ../good/diy.5.01-ARMParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias diy.5.01-ARMParser)
 (action (diff ../good/diy.5.01-ARMParser.exp diy.5.01-ARMParser.out)))
(rule (target dml.opp.out) (deps ../good/dml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias dml) (action (diff ../good/dml.opp.exp dml.opp.out)))
(rule (target dml.out) (deps ../good/dml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias dml) (action (diff ../good/dml.exp dml.out)))
(rule (target dns.1.0.1-zone_parser.opp.out)
 (deps ../good/dns.1.0.1-zone_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias dns.1.0.1-zone_parser)
 (action
  (diff ../good/dns.1.0.1-zone_parser.opp.exp dns.1.0.1-zone_parser.opp.out)))
(rule (target dns.1.0.1-zone_parser.out)
 (deps ../good/dns.1.0.1-zone_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias dns.1.0.1-zone_parser)
 (action (diff ../good/dns.1.0.1-zone_parser.exp dns.1.0.1-zone_parser.out)))
(rule (target doc-ock-xml.1.2.1-docOckXmlParser.opp.out)
 (deps ../good/doc-ock-xml.1.2.1-docOckXmlParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias doc-ock-xml.1.2.1-docOckXmlParser)
 (action
  (diff ../good/doc-ock-xml.1.2.1-docOckXmlParser.opp.exp
   doc-ock-xml.1.2.1-docOckXmlParser.opp.out)))
(rule (target doc-ock-xml.1.2.1-docOckXmlParser.out)
 (deps ../good/doc-ock-xml.1.2.1-docOckXmlParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias doc-ock-xml.1.2.1-docOckXmlParser)
 (action
  (diff ../good/doc-ock-xml.1.2.1-docOckXmlParser.exp
   doc-ock-xml.1.2.1-docOckXmlParser.out)))
(rule (target docOckXmlParser.opp.out) (deps ../good/docOckXmlParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias docOckXmlParser)
 (action (diff ../good/docOckXmlParser.opp.exp docOckXmlParser.opp.out)))
(rule (target docOckXmlParser.out) (deps ../good/docOckXmlParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias docOckXmlParser)
 (action (diff ../good/docOckXmlParser.exp docOckXmlParser.out)))
(rule (target dolmen.0.2-parseDimacs.opp.out)
 (deps ../good/dolmen.0.2-parseDimacs.mly
  ../good/dolmen.0.2-parseDimacs01.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess --base dolmen.0.2-parseDimacs %{deps})))))
(rule (alias dolmen.0.2-parseDimacs)
 (action
  (diff ../good/dolmen.0.2-parseDimacs.opp.exp
   dolmen.0.2-parseDimacs.opp.out)))
(rule (target dolmen.0.2-parseDimacs.out)
 (deps ../good/dolmen.0.2-parseDimacs.mly
  ../good/dolmen.0.2-parseDimacs01.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base dolmen.0.2-parseDimacs --explain -lg 2 -la 2 -lc 2
     %{deps})))))
(rule (alias dolmen.0.2-parseDimacs)
 (action
  (diff ../good/dolmen.0.2-parseDimacs.exp dolmen.0.2-parseDimacs.out)))
(rule (target dolmen.0.2-parseTptp.opp.out)
 (deps ../good/dolmen.0.2-parseTptp.mly ../good/dolmen.0.2-parseTptp01.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess --base dolmen.0.2-parseTptp %{deps})))))
(rule (alias dolmen.0.2-parseTptp)
 (action
  (diff ../good/dolmen.0.2-parseTptp.opp.exp dolmen.0.2-parseTptp.opp.out)))
(rule (target dolmen.0.2-parseTptp.out)
 (deps ../good/dolmen.0.2-parseTptp.mly ../good/dolmen.0.2-parseTptp01.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base dolmen.0.2-parseTptp --explain -lg 2 -la 2 -lc 2
     %{deps})))))
(rule (alias dolmen.0.2-parseTptp)
 (action (diff ../good/dolmen.0.2-parseTptp.exp dolmen.0.2-parseTptp.out)))
(rule (target dule.opp.out) (deps ../good/dule.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias dule) (action (diff ../good/dule.opp.exp dule.opp.out)))
(rule (target dule.out) (deps ../good/dule.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias dule) (action (diff ../good/dule.exp dule.out)))
(rule (target dune.1.4.0-opamBaseParser.opp.out)
 (deps ../good/dune.1.4.0-opamBaseParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias dune.1.4.0-opamBaseParser)
 (action
  (diff ../good/dune.1.4.0-opamBaseParser.opp.exp
   dune.1.4.0-opamBaseParser.opp.out)))
(rule (target dune.1.4.0-opamBaseParser.out)
 (deps ../good/dune.1.4.0-opamBaseParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias dune.1.4.0-opamBaseParser)
 (action
  (diff ../good/dune.1.4.0-opamBaseParser.exp dune.1.4.0-opamBaseParser.out)))
(rule (target duplicated_prec.opp.out) (deps ../good/duplicated_prec.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias duplicated_prec)
 (action (diff ../good/duplicated_prec.opp.exp duplicated_prec.opp.out)))
(rule (target duplicated_prec.out) (deps ../good/duplicated_prec.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias duplicated_prec)
 (action (diff ../good/duplicated_prec.exp duplicated_prec.out)))
(rule (target efuns.opp.out) (deps ../good/efuns.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias efuns) (action (diff ../good/efuns.opp.exp efuns.opp.out)))
(rule (target efuns.out) (deps ../good/efuns.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias efuns) (action (diff ../good/efuns.exp efuns.out)))
(rule (target electrod.0.1.7-Parser.opp.out)
 (deps ../good/electrod.0.1.7-Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias electrod.0.1.7-Parser)
 (action
  (diff ../good/electrod.0.1.7-Parser.opp.exp electrod.0.1.7-Parser.opp.out)))
(rule (target electrod.0.1.7-Parser.out)
 (deps ../good/electrod.0.1.7-Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias electrod.0.1.7-Parser)
 (action (diff ../good/electrod.0.1.7-Parser.exp electrod.0.1.7-Parser.out)))
(rule (target electrum00.opp.out)
 (deps ../good/electrum00.mly ../good/electrum01.mly ../good/electrum02.mly
  ../good/electrum03.mly ../good/electrum04.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess --base electrum00 %{deps})))))
(rule (alias electrum00)
 (action (diff ../good/electrum00.opp.exp electrum00.opp.out)))
(rule (target electrum00.out)
 (deps ../good/electrum00.mly ../good/electrum01.mly ../good/electrum02.mly
  ../good/electrum03.mly ../good/electrum04.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base electrum00 --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias electrum00)
 (action (diff ../good/electrum00.exp electrum00.out)))
(rule (target empty-action.opp.out) (deps ../good/empty-action.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias empty-action)
 (action (diff ../good/empty-action.opp.exp empty-action.opp.out)))
(rule (target empty-action.out) (deps ../good/empty-action.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias empty-action)
 (action (diff ../good/empty-action.exp empty-action.out)))
(rule (target end-of-stream-conflict.opp.out)
 (deps ../good/end-of-stream-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias end-of-stream-conflict)
 (action
  (diff ../good/end-of-stream-conflict.opp.exp
   end-of-stream-conflict.opp.out)))
(rule (target end-of-stream-conflict.out)
 (deps ../good/end-of-stream-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias end-of-stream-conflict)
 (action
  (diff ../good/end-of-stream-conflict.exp end-of-stream-conflict.out)))
(rule (target execparser.opp.out) (deps ../good/execparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias execparser)
 (action (diff ../good/execparser.opp.exp execparser.opp.out)))
(rule (target execparser.out) (deps ../good/execparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias execparser)
 (action (diff ../good/execparser.exp execparser.out)))
(rule (target featherweight.opp.out) (deps ../good/featherweight.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias featherweight)
 (action (diff ../good/featherweight.opp.exp featherweight.opp.out)))
(rule (target featherweight.out) (deps ../good/featherweight.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias featherweight)
 (action (diff ../good/featherweight.exp featherweight.out)))
(rule (target fibonacci.opp.out) (deps ../good/fibonacci.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fibonacci)
 (action (diff ../good/fibonacci.opp.exp fibonacci.opp.out)))
(rule (target fibonacci.out) (deps ../good/fibonacci.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fibonacci) (action (diff ../good/fibonacci.exp fibonacci.out)))
(rule (target filiot.opp.out) (deps ../good/filiot.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias filiot) (action (diff ../good/filiot.opp.exp filiot.opp.out)))
(rule (target filiot.out) (deps ../good/filiot.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias filiot) (action (diff ../good/filiot.exp filiot.out)))
(rule (target flowcaml.opp.out) (deps ../good/flowcaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias flowcaml)
 (action (diff ../good/flowcaml.opp.exp flowcaml.opp.out)))
(rule (target flowcaml.out) (deps ../good/flowcaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias flowcaml) (action (diff ../good/flowcaml.exp flowcaml.out)))
(rule (target flowcaml-docgen.opp.out) (deps ../good/flowcaml-docgen.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias flowcaml-docgen)
 (action (diff ../good/flowcaml-docgen.opp.exp flowcaml-docgen.opp.out)))
(rule (target flowcaml-docgen.out) (deps ../good/flowcaml-docgen.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias flowcaml-docgen)
 (action (diff ../good/flowcaml-docgen.exp flowcaml-docgen.out)))
(rule (target focc-pure-def.opp.out) (deps ../good/focc-pure-def.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias focc-pure-def)
 (action (diff ../good/focc-pure-def.opp.exp focc-pure-def.opp.out)))
(rule (target focc-pure-def.out) (deps ../good/focc-pure-def.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias focc-pure-def)
 (action (diff ../good/focc-pure-def.exp focc-pure-def.out)))
(rule (target foo.opp.out) (deps ../good/foo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias foo) (action (diff ../good/foo.opp.exp foo.opp.out)))
(rule (target foo.out) (deps ../good/foo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias foo) (action (diff ../good/foo.exp foo.out)))
(rule (target fork.opp.out) (deps ../good/fork.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fork) (action (diff ../good/fork.opp.exp fork.opp.out)))
(rule (target fork.out) (deps ../good/fork.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fork) (action (diff ../good/fork.exp fork.out)))
(rule (target fp.opp.out) (deps ../good/fp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fp) (action (diff ../good/fp.opp.exp fp.opp.out)))
(rule (target fp.out) (deps ../good/fp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fp) (action (diff ../good/fp.exp fp.out)))
(rule (target frama-c-base.20170501-logic_parser.opp.out)
 (deps ../good/frama-c-base.20170501-logic_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias frama-c-base.20170501-logic_parser)
 (action
  (diff ../good/frama-c-base.20170501-logic_parser.opp.exp
   frama-c-base.20170501-logic_parser.opp.out)))
(rule (target frama-c-base.20170501-logic_parser.out)
 (deps ../good/frama-c-base.20170501-logic_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias frama-c-base.20170501-logic_parser)
 (action
  (diff ../good/frama-c-base.20170501-logic_parser.exp
   frama-c-base.20170501-logic_parser.out)))
(rule (target framac-cparser.opp.out) (deps ../good/framac-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias framac-cparser)
 (action (diff ../good/framac-cparser.opp.exp framac-cparser.opp.out)))
(rule (target framac-cparser.out) (deps ../good/framac-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias framac-cparser)
 (action (diff ../good/framac-cparser.exp framac-cparser.out)))
(rule (target framac-print_api-grammar.opp.out)
 (deps ../good/framac-print_api-grammar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias framac-print_api-grammar)
 (action
  (diff ../good/framac-print_api-grammar.opp.exp
   framac-print_api-grammar.opp.out)))
(rule (target framac-print_api-grammar.out)
 (deps ../good/framac-print_api-grammar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias framac-print_api-grammar)
 (action
  (diff ../good/framac-print_api-grammar.exp framac-print_api-grammar.out)))
(rule (target fsharp.opp.out) (deps ../good/fsharp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fsharp) (action (diff ../good/fsharp.opp.exp fsharp.opp.out)))
(rule (target fsharp.out) (deps ../good/fsharp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fsharp) (action (diff ../good/fsharp.exp fsharp.out)))
(rule (target fslexpars.opp.out) (deps ../good/fslexpars.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fslexpars)
 (action (diff ../good/fslexpars.opp.exp fslexpars.opp.out)))
(rule (target fslexpars.out) (deps ../good/fslexpars.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fslexpars) (action (diff ../good/fslexpars.exp fslexpars.out)))
(rule (target fstar.opp.out) (deps ../good/fstar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fstar) (action (diff ../good/fstar.opp.exp fstar.opp.out)))
(rule (target fstar.out) (deps ../good/fstar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fstar) (action (diff ../good/fstar.exp fstar.out)))
(rule (target fstar.0.9.6.0~alpha1-parse.opp.out)
 (deps ../good/fstar.0.9.6.0~alpha1-parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fstar.0.9.6.0~alpha1-parse)
 (action
  (diff ../good/fstar.0.9.6.0~alpha1-parse.opp.exp
   fstar.0.9.6.0~alpha1-parse.opp.out)))
(rule (target fstar.0.9.6.0~alpha1-parse.out)
 (deps ../good/fstar.0.9.6.0~alpha1-parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fstar.0.9.6.0~alpha1-parse)
 (action
  (diff ../good/fstar.0.9.6.0~alpha1-parse.exp
   fstar.0.9.6.0~alpha1-parse.out)))
(rule (target fsyaccpars.opp.out) (deps ../good/fsyaccpars.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias fsyaccpars)
 (action (diff ../good/fsyaccpars.opp.exp fsyaccpars.opp.out)))
(rule (target fsyaccpars.out) (deps ../good/fsyaccpars.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias fsyaccpars)
 (action (diff ../good/fsyaccpars.exp fsyaccpars.out)))
(rule (target gdb.0.3-gdbmi_parser.opp.out)
 (deps ../good/gdb.0.3-gdbmi_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias gdb.0.3-gdbmi_parser)
 (action
  (diff ../good/gdb.0.3-gdbmi_parser.opp.exp gdb.0.3-gdbmi_parser.opp.out)))
(rule (target gdb.0.3-gdbmi_parser.out)
 (deps ../good/gdb.0.3-gdbmi_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias gdb.0.3-gdbmi_parser)
 (action (diff ../good/gdb.0.3-gdbmi_parser.exp gdb.0.3-gdbmi_parser.out)))
(rule (target gettext.0.3.8-gettextPo_parser.opp.out)
 (deps ../good/gettext.0.3.8-gettextPo_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias gettext.0.3.8-gettextPo_parser)
 (action
  (diff ../good/gettext.0.3.8-gettextPo_parser.opp.exp
   gettext.0.3.8-gettextPo_parser.opp.out)))
(rule (target gettext.0.3.8-gettextPo_parser.out)
 (deps ../good/gettext.0.3.8-gettextPo_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias gettext.0.3.8-gettextPo_parser)
 (action
  (diff ../good/gettext.0.3.8-gettextPo_parser.exp
   gettext.0.3.8-gettextPo_parser.out)))
(rule (target godiva.opp.out) (deps ../good/godiva.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias godiva) (action (diff ../good/godiva.opp.exp godiva.opp.out)))
(rule (target godiva.out) (deps ../good/godiva.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias godiva) (action (diff ../good/godiva.exp godiva.out)))
(rule (target gromit.opp.out) (deps ../good/gromit.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias gromit) (action (diff ../good/gromit.opp.exp gromit.opp.out)))
(rule (target gromit.out) (deps ../good/gromit.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias gromit) (action (diff ../good/gromit.exp gromit.out)))
(rule (target grune924.opp.out) (deps ../good/grune924.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias grune924)
 (action (diff ../good/grune924.opp.exp grune924.opp.out)))
(rule (target grune924.out) (deps ../good/grune924.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias grune924) (action (diff ../good/grune924.exp grune924.out)))
(rule (target heptagon.1.05.00-hept_parser.opp.out)
 (deps ../good/heptagon.1.05.00-hept_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias heptagon.1.05.00-hept_parser)
 (action
  (diff ../good/heptagon.1.05.00-hept_parser.opp.exp
   heptagon.1.05.00-hept_parser.opp.out)))
(rule (target heptagon.1.05.00-hept_parser.out)
 (deps ../good/heptagon.1.05.00-hept_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias heptagon.1.05.00-hept_parser)
 (action
  (diff ../good/heptagon.1.05.00-hept_parser.exp
   heptagon.1.05.00-hept_parser.out)))
(rule (target herdtools7.7.51-AArch64Parser.opp.out)
 (deps ../good/herdtools7.7.51-AArch64Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-AArch64Parser)
 (action
  (diff ../good/herdtools7.7.51-AArch64Parser.opp.exp
   herdtools7.7.51-AArch64Parser.opp.out)))
(rule (target herdtools7.7.51-AArch64Parser.out)
 (deps ../good/herdtools7.7.51-AArch64Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-AArch64Parser)
 (action
  (diff ../good/herdtools7.7.51-AArch64Parser.exp
   herdtools7.7.51-AArch64Parser.out)))
(rule (target herdtools7.7.51-ARMParser.opp.out)
 (deps ../good/herdtools7.7.51-ARMParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-ARMParser)
 (action
  (diff ../good/herdtools7.7.51-ARMParser.opp.exp
   herdtools7.7.51-ARMParser.opp.out)))
(rule (target herdtools7.7.51-ARMParser.out)
 (deps ../good/herdtools7.7.51-ARMParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-ARMParser)
 (action
  (diff ../good/herdtools7.7.51-ARMParser.exp herdtools7.7.51-ARMParser.out)))
(rule (target herdtools7.7.51-CParser.opp.out)
 (deps ../good/herdtools7.7.51-CParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-CParser)
 (action
  (diff ../good/herdtools7.7.51-CParser.opp.exp
   herdtools7.7.51-CParser.opp.out)))
(rule (target herdtools7.7.51-CParser.out)
 (deps ../good/herdtools7.7.51-CParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-CParser)
 (action
  (diff ../good/herdtools7.7.51-CParser.exp herdtools7.7.51-CParser.out)))
(rule (target herdtools7.7.51-LISAParser.opp.out)
 (deps ../good/herdtools7.7.51-LISAParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-LISAParser)
 (action
  (diff ../good/herdtools7.7.51-LISAParser.opp.exp
   herdtools7.7.51-LISAParser.opp.out)))
(rule (target herdtools7.7.51-LISAParser.out)
 (deps ../good/herdtools7.7.51-LISAParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-LISAParser)
 (action
  (diff ../good/herdtools7.7.51-LISAParser.exp
   herdtools7.7.51-LISAParser.out)))
(rule (target herdtools7.7.51-PPCParser.opp.out)
 (deps ../good/herdtools7.7.51-PPCParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-PPCParser)
 (action
  (diff ../good/herdtools7.7.51-PPCParser.opp.exp
   herdtools7.7.51-PPCParser.opp.out)))
(rule (target herdtools7.7.51-PPCParser.out)
 (deps ../good/herdtools7.7.51-PPCParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-PPCParser)
 (action
  (diff ../good/herdtools7.7.51-PPCParser.exp herdtools7.7.51-PPCParser.out)))
(rule (target herdtools7.7.51-RISCVParser.opp.out)
 (deps ../good/herdtools7.7.51-RISCVParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-RISCVParser)
 (action
  (diff ../good/herdtools7.7.51-RISCVParser.opp.exp
   herdtools7.7.51-RISCVParser.opp.out)))
(rule (target herdtools7.7.51-RISCVParser.out)
 (deps ../good/herdtools7.7.51-RISCVParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-RISCVParser)
 (action
  (diff ../good/herdtools7.7.51-RISCVParser.exp
   herdtools7.7.51-RISCVParser.out)))
(rule (target herdtools7.7.51-X86Parser.opp.out)
 (deps ../good/herdtools7.7.51-X86Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-X86Parser)
 (action
  (diff ../good/herdtools7.7.51-X86Parser.opp.exp
   herdtools7.7.51-X86Parser.opp.out)))
(rule (target herdtools7.7.51-X86Parser.out)
 (deps ../good/herdtools7.7.51-X86Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-X86Parser)
 (action
  (diff ../good/herdtools7.7.51-X86Parser.exp herdtools7.7.51-X86Parser.out)))
(rule (target herdtools7.7.51-modelParser.opp.out)
 (deps ../good/herdtools7.7.51-modelParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-modelParser)
 (action
  (diff ../good/herdtools7.7.51-modelParser.opp.exp
   herdtools7.7.51-modelParser.opp.out)))
(rule (target herdtools7.7.51-modelParser.out)
 (deps ../good/herdtools7.7.51-modelParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-modelParser)
 (action
  (diff ../good/herdtools7.7.51-modelParser.exp
   herdtools7.7.51-modelParser.out)))
(rule (target herdtools7.7.51-stateParser.opp.out)
 (deps ../good/herdtools7.7.51-stateParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias herdtools7.7.51-stateParser)
 (action
  (diff ../good/herdtools7.7.51-stateParser.opp.exp
   herdtools7.7.51-stateParser.opp.out)))
(rule (target herdtools7.7.51-stateParser.out)
 (deps ../good/herdtools7.7.51-stateParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias herdtools7.7.51-stateParser)
 (action
  (diff ../good/herdtools7.7.51-stateParser.exp
   herdtools7.7.51-stateParser.out)))
(rule (target hmx-multi.opp.out) (deps ../good/hmx-multi.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias hmx-multi)
 (action (diff ../good/hmx-multi.opp.exp hmx-multi.opp.out)))
(rule (target hmx-multi.out) (deps ../good/hmx-multi.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias hmx-multi) (action (diff ../good/hmx-multi.exp hmx-multi.out)))
(rule (target hmx-sets.opp.out) (deps ../good/hmx-sets.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias hmx-sets)
 (action (diff ../good/hmx-sets.opp.exp hmx-sets.opp.out)))
(rule (target hmx-sets.out) (deps ../good/hmx-sets.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias hmx-sets) (action (diff ../good/hmx-sets.exp hmx-sets.out)))
(rule (target ho.opp.out) (deps ../good/ho.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ho) (action (diff ../good/ho.opp.exp ho.opp.out)))
(rule (target ho.out) (deps ../good/ho.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ho) (action (diff ../good/ho.exp ho.out)))
(rule (target htparser.opp.out) (deps ../good/htparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias htparser)
 (action (diff ../good/htparser.opp.exp htparser.opp.out)))
(rule (target htparser.out) (deps ../good/htparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias htparser) (action (diff ../good/htparser.exp htparser.out)))
(rule (target hydro.0.7.1-hgen_parser.opp.out)
 (deps ../good/hydro.0.7.1-hgen_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias hydro.0.7.1-hgen_parser)
 (action
  (diff ../good/hydro.0.7.1-hgen_parser.opp.exp
   hydro.0.7.1-hgen_parser.opp.out)))
(rule (target hydro.0.7.1-hgen_parser.out)
 (deps ../good/hydro.0.7.1-hgen_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias hydro.0.7.1-hgen_parser)
 (action
  (diff ../good/hydro.0.7.1-hgen_parser.exp hydro.0.7.1-hgen_parser.out)))
(rule (target ibal.opp.out) (deps ../good/ibal.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ibal) (action (diff ../good/ibal.opp.exp ibal.opp.out)))
(rule (target ibal.out) (deps ../good/ibal.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ibal) (action (diff ../good/ibal.exp ibal.out)))
(rule (target ics.opp.out) (deps ../good/ics.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ics) (action (diff ../good/ics.opp.exp ics.opp.out)))
(rule (target ics.out) (deps ../good/ics.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ics) (action (diff ../good/ics.exp ics.out)))
(rule (target idl_parser.opp.out) (deps ../good/idl_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias idl_parser)
 (action (diff ../good/idl_parser.opp.exp idl_parser.opp.out)))
(rule (target idl_parser.out) (deps ../good/idl_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias idl_parser)
 (action (diff ../good/idl_parser.exp idl_parser.out)))
(rule (target ilpars.opp.out) (deps ../good/ilpars.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ilpars) (action (diff ../good/ilpars.opp.exp ilpars.opp.out)))
(rule (target ilpars.out) (deps ../good/ilpars.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ilpars) (action (diff ../good/ilpars.exp ilpars.out)))
(rule (target imaplet-lwt.0.1.9-parser.opp.out)
 (deps ../good/imaplet-lwt.0.1.9-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias imaplet-lwt.0.1.9-parser)
 (action
  (diff ../good/imaplet-lwt.0.1.9-parser.opp.exp
   imaplet-lwt.0.1.9-parser.opp.out)))
(rule (target imaplet-lwt.0.1.9-parser.out)
 (deps ../good/imaplet-lwt.0.1.9-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias imaplet-lwt.0.1.9-parser)
 (action
  (diff ../good/imaplet-lwt.0.1.9-parser.exp imaplet-lwt.0.1.9-parser.out)))
(rule (target infinite.opp.out) (deps ../good/infinite.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias infinite)
 (action (diff ../good/infinite.opp.exp infinite.opp.out)))
(rule (target infinite.out) (deps ../good/infinite.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias infinite) (action (diff ../good/infinite.exp infinite.out)))
(rule (target inline-multi-level.opp.out)
 (deps ../good/inline-multi-level.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inline-multi-level)
 (action
  (diff ../good/inline-multi-level.opp.exp inline-multi-level.opp.out)))
(rule (target inline-multi-level.out) (deps ../good/inline-multi-level.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inline-multi-level)
 (action (diff ../good/inline-multi-level.exp inline-multi-level.out)))
(rule (target inline-multi-sons.opp.out) (deps ../good/inline-multi-sons.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inline-multi-sons)
 (action (diff ../good/inline-multi-sons.opp.exp inline-multi-sons.opp.out)))
(rule (target inline-multi-sons.out) (deps ../good/inline-multi-sons.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inline-multi-sons)
 (action (diff ../good/inline-multi-sons.exp inline-multi-sons.out)))
(rule (target inline-position.opp.out) (deps ../good/inline-position.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inline-position)
 (action (diff ../good/inline-position.opp.exp inline-position.opp.out)))
(rule (target inline-position.out) (deps ../good/inline-position.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inline-position)
 (action (diff ../good/inline-position.exp inline-position.out)))
(rule (target inline-rename.opp.out) (deps ../good/inline-rename.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inline-rename)
 (action (diff ../good/inline-rename.opp.exp inline-rename.opp.out)))
(rule (target inline-rename.out) (deps ../good/inline-rename.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inline-rename)
 (action (diff ../good/inline-rename.exp inline-rename.out)))
(rule (target inline-shift.opp.out) (deps ../good/inline-shift.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inline-shift)
 (action (diff ../good/inline-shift.opp.exp inline-shift.opp.out)))
(rule (target inline-shift.out) (deps ../good/inline-shift.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inline-shift)
 (action (diff ../good/inline-shift.exp inline-shift.out)))
(rule (target inline-test.opp.out) (deps ../good/inline-test.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inline-test)
 (action (diff ../good/inline-test.opp.exp inline-test.opp.out)))
(rule (target inline-test.out) (deps ../good/inline-test.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inline-test)
 (action (diff ../good/inline-test.exp inline-test.out)))
(rule (target inline-with-dollar.opp.out)
 (deps ../good/inline-with-dollar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inline-with-dollar)
 (action
  (diff ../good/inline-with-dollar.opp.exp inline-with-dollar.opp.out)))
(rule (target inline-with-dollar.out) (deps ../good/inline-with-dollar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inline-with-dollar)
 (action (diff ../good/inline-with-dollar.exp inline-with-dollar.out)))
(rule (target inlined-dollar.opp.out) (deps ../good/inlined-dollar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inlined-dollar)
 (action (diff ../good/inlined-dollar.opp.exp inlined-dollar.opp.out)))
(rule (target inlined-dollar.out) (deps ../good/inlined-dollar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inlined-dollar)
 (action (diff ../good/inlined-dollar.exp inlined-dollar.out)))
(rule (target inlining-capture.opp.out) (deps ../good/inlining-capture.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inlining-capture)
 (action (diff ../good/inlining-capture.opp.exp inlining-capture.opp.out)))
(rule (target inlining-capture.out) (deps ../good/inlining-capture.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inlining-capture)
 (action (diff ../good/inlining-capture.exp inlining-capture.out)))
(rule (target inliningWithSideEffects.opp.out)
 (deps ../good/inliningWithSideEffects.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias inliningWithSideEffects)
 (action
  (diff ../good/inliningWithSideEffects.opp.exp
   inliningWithSideEffects.opp.out)))
(rule (target inliningWithSideEffects.out)
 (deps ../good/inliningWithSideEffects.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias inliningWithSideEffects)
 (action
  (diff ../good/inliningWithSideEffects.exp inliningWithSideEffects.out)))
(rule (target jasmc.opp.out) (deps ../good/jasmc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias jasmc) (action (diff ../good/jasmc.opp.exp jasmc.opp.out)))
(rule (target jasmc.out) (deps ../good/jasmc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias jasmc) (action (diff ../good/jasmc.exp jasmc.out)))
(rule (target java.opp.out) (deps ../good/java.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias java) (action (diff ../good/java.opp.exp java.opp.out)))
(rule (target java.out) (deps ../good/java.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias java) (action (diff ../good/java.exp java.out)))
(rule (target jingoo.1.2.9-jg_parser.opp.out)
 (deps ../good/jingoo.1.2.9-jg_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias jingoo.1.2.9-jg_parser)
 (action
  (diff ../good/jingoo.1.2.9-jg_parser.opp.exp
   jingoo.1.2.9-jg_parser.opp.out)))
(rule (target jingoo.1.2.9-jg_parser.out)
 (deps ../good/jingoo.1.2.9-jg_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias jingoo.1.2.9-jg_parser)
 (action
  (diff ../good/jingoo.1.2.9-jg_parser.exp jingoo.1.2.9-jg_parser.out)))
(rule (target jml.opp.out) (deps ../good/jml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias jml) (action (diff ../good/jml.opp.exp jml.opp.out)))
(rule (target jml.out) (deps ../good/jml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias jml) (action (diff ../good/jml.exp jml.out)))
(rule (target jocaml.opp.out) (deps ../good/jocaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias jocaml) (action (diff ../good/jocaml.opp.exp jocaml.opp.out)))
(rule (target jocaml.out) (deps ../good/jocaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias jocaml) (action (diff ../good/jocaml.exp jocaml.out)))
(rule (target jocaml-ambients.opp.out) (deps ../good/jocaml-ambients.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias jocaml-ambients)
 (action (diff ../good/jocaml-ambients.opp.exp jocaml-ambients.opp.out)))
(rule (target jocaml-ambients.out) (deps ../good/jocaml-ambients.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias jocaml-ambients)
 (action (diff ../good/jocaml-ambients.exp jocaml-ambients.out)))
(rule (target jocaml-new-parser.opp.out) (deps ../good/jocaml-new-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias jocaml-new-parser)
 (action (diff ../good/jocaml-new-parser.opp.exp jocaml-new-parser.opp.out)))
(rule (target jocaml-new-parser.out) (deps ../good/jocaml-new-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias jocaml-new-parser)
 (action (diff ../good/jocaml-new-parser.exp jocaml-new-parser.out)))
(rule (target jparser.opp.out) (deps ../good/jparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias jparser)
 (action (diff ../good/jparser.opp.exp jparser.opp.out)))
(rule (target jparser.out) (deps ../good/jparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias jparser) (action (diff ../good/jparser.exp jparser.out)))
(rule (target js_of_ocaml.3.2.0-js_parser.opp.out)
 (deps ../good/js_of_ocaml.3.2.0-js_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias js_of_ocaml.3.2.0-js_parser)
 (action
  (diff ../good/js_of_ocaml.3.2.0-js_parser.opp.exp
   js_of_ocaml.3.2.0-js_parser.opp.out)))
(rule (target js_of_ocaml.3.2.0-js_parser.out)
 (deps ../good/js_of_ocaml.3.2.0-js_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias js_of_ocaml.3.2.0-js_parser)
 (action
  (diff ../good/js_of_ocaml.3.2.0-js_parser.exp
   js_of_ocaml.3.2.0-js_parser.out)))
(rule (target judicael.opp.out) (deps ../good/judicael.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias judicael)
 (action (diff ../good/judicael.opp.exp judicael.opp.out)))
(rule (target judicael.out) (deps ../good/judicael.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias judicael) (action (diff ../good/judicael.exp judicael.out)))
(rule (target julia.opp.out) (deps ../good/julia.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias julia) (action (diff ../good/julia.opp.exp julia.opp.out)))
(rule (target julia.out) (deps ../good/julia.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias julia) (action (diff ../good/julia.exp julia.out)))
(rule (target ketti.opp.out) (deps ../good/ketti.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ketti) (action (diff ../good/ketti.opp.exp ketti.opp.out)))
(rule (target ketti.out) (deps ../good/ketti.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ketti) (action (diff ../good/ketti.exp ketti.out)))
(rule (target kimmit.opp.out) (deps ../good/kimmit.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias kimmit) (action (diff ../good/kimmit.opp.exp kimmit.opp.out)))
(rule (target kimmit.out) (deps ../good/kimmit.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias kimmit) (action (diff ../good/kimmit.exp kimmit.out)))
(rule (target kremlin.0.9.6.0-parser.opp.out)
 (deps ../good/kremlin.0.9.6.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias kremlin.0.9.6.0-parser)
 (action
  (diff ../good/kremlin.0.9.6.0-parser.opp.exp
   kremlin.0.9.6.0-parser.opp.out)))
(rule (target kremlin.0.9.6.0-parser.out)
 (deps ../good/kremlin.0.9.6.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias kremlin.0.9.6.0-parser)
 (action
  (diff ../good/kremlin.0.9.6.0-parser.exp kremlin.0.9.6.0-parser.out)))
(rule (target labltk-compiler.opp.out) (deps ../good/labltk-compiler.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias labltk-compiler)
 (action (diff ../good/labltk-compiler.opp.exp labltk-compiler.opp.out)))
(rule (target labltk-compiler.out) (deps ../good/labltk-compiler.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias labltk-compiler)
 (action (diff ../good/labltk-compiler.exp labltk-compiler.out)))
(rule (target labltk-ppyac.opp.out) (deps ../good/labltk-ppyac.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias labltk-ppyac)
 (action (diff ../good/labltk-ppyac.opp.exp labltk-ppyac.opp.out)))
(rule (target labltk-ppyac.out) (deps ../good/labltk-ppyac.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias labltk-ppyac)
 (action (diff ../good/labltk-ppyac.exp labltk-ppyac.out)))
(rule (target labrys.0.1-parser.opp.out) (deps ../good/labrys.0.1-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias labrys.0.1-parser)
 (action (diff ../good/labrys.0.1-parser.opp.exp labrys.0.1-parser.opp.out)))
(rule (target labrys.0.1-parser.out) (deps ../good/labrys.0.1-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias labrys.0.1-parser)
 (action (diff ../good/labrys.0.1-parser.exp labrys.0.1-parser.out)))
(rule (target lambdapi.1.0-menhir_parser.opp.out)
 (deps ../good/lambdapi.1.0-menhir_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias lambdapi.1.0-menhir_parser)
 (action
  (diff ../good/lambdapi.1.0-menhir_parser.opp.exp
   lambdapi.1.0-menhir_parser.opp.out)))
(rule (target lambdapi.1.0-menhir_parser.out)
 (deps ../good/lambdapi.1.0-menhir_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias lambdapi.1.0-menhir_parser)
 (action
  (diff ../good/lambdapi.1.0-menhir_parser.exp
   lambdapi.1.0-menhir_parser.out)))
(rule (target lambdoc_rlambtex_parser.opp.out)
 (deps ../good/lambdoc_rlambtex_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias lambdoc_rlambtex_parser)
 (action
  (diff ../good/lambdoc_rlambtex_parser.opp.exp
   lambdoc_rlambtex_parser.opp.out)))
(rule (target lambdoc_rlambtex_parser.out)
 (deps ../good/lambdoc_rlambtex_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias lambdoc_rlambtex_parser)
 (action
  (diff ../good/lambdoc_rlambtex_parser.exp lambdoc_rlambtex_parser.out)))
(rule (target ldap.2.4.0-ldap_filterparser.opp.out)
 (deps ../good/ldap.2.4.0-ldap_filterparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ldap.2.4.0-ldap_filterparser)
 (action
  (diff ../good/ldap.2.4.0-ldap_filterparser.opp.exp
   ldap.2.4.0-ldap_filterparser.opp.out)))
(rule (target ldap.2.4.0-ldap_filterparser.out)
 (deps ../good/ldap.2.4.0-ldap_filterparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ldap.2.4.0-ldap_filterparser)
 (action
  (diff ../good/ldap.2.4.0-ldap_filterparser.exp
   ldap.2.4.0-ldap_filterparser.out)))
(rule (target lem.opp.out) (deps ../good/lem.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias lem) (action (diff ../good/lem.opp.exp lem.opp.out)))
(rule (target lem.out) (deps ../good/lem.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias lem) (action (diff ../good/lem.exp lem.out)))
(rule (target liberty_parser.opp.out) (deps ../good/liberty_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias liberty_parser)
 (action (diff ../good/liberty_parser.opp.exp liberty_parser.opp.out)))
(rule (target liberty_parser.out) (deps ../good/liberty_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias liberty_parser)
 (action (diff ../good/liberty_parser.exp liberty_parser.out)))
(rule (target link.opp.out) (deps ../good/link.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias link) (action (diff ../good/link.opp.exp link.opp.out)))
(rule (target link.out) (deps ../good/link.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias link) (action (diff ../good/link.exp link.out)))
(rule (target links.opp.out) (deps ../good/links.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias links) (action (diff ../good/links.opp.exp links.opp.out)))
(rule (target links.out) (deps ../good/links.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias links) (action (diff ../good/links.exp links.out)))
(rule (target links.0.8-jsonparse.opp.out)
 (deps ../good/links.0.8-jsonparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias links.0.8-jsonparse)
 (action
  (diff ../good/links.0.8-jsonparse.opp.exp links.0.8-jsonparse.opp.out)))
(rule (target links.0.8-jsonparse.out) (deps ../good/links.0.8-jsonparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias links.0.8-jsonparse)
 (action (diff ../good/links.0.8-jsonparse.exp links.0.8-jsonparse.out)))
(rule (target links.0.8-parser.opp.out) (deps ../good/links.0.8-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias links.0.8-parser)
 (action (diff ../good/links.0.8-parser.opp.exp links.0.8-parser.opp.out)))
(rule (target links.0.8-parser.out) (deps ../good/links.0.8-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias links.0.8-parser)
 (action (diff ../good/links.0.8-parser.exp links.0.8-parser.out)))
(rule (target links.0.8-xmlParser.opp.out)
 (deps ../good/links.0.8-xmlParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias links.0.8-xmlParser)
 (action
  (diff ../good/links.0.8-xmlParser.opp.exp links.0.8-xmlParser.opp.out)))
(rule (target links.0.8-xmlParser.out) (deps ../good/links.0.8-xmlParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias links.0.8-xmlParser)
 (action (diff ../good/links.0.8-xmlParser.exp links.0.8-xmlParser.out)))
(rule (target liquidsoap.1.3.4-lang_parser.opp.out)
 (deps ../good/liquidsoap.1.3.4-lang_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias liquidsoap.1.3.4-lang_parser)
 (action
  (diff ../good/liquidsoap.1.3.4-lang_parser.opp.exp
   liquidsoap.1.3.4-lang_parser.opp.out)))
(rule (target liquidsoap.1.3.4-lang_parser.out)
 (deps ../good/liquidsoap.1.3.4-lang_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias liquidsoap.1.3.4-lang_parser)
 (action
  (diff ../good/liquidsoap.1.3.4-lang_parser.exp
   liquidsoap.1.3.4-lang_parser.out)))
(rule (target llparse.opp.out) (deps ../good/llparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias llparse)
 (action (diff ../good/llparse.opp.exp llparse.opp.out)))
(rule (target llparse.out) (deps ../good/llparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias llparse) (action (diff ../good/llparse.exp llparse.out)))
(rule (target logic_parser.opp.out) (deps ../good/logic_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias logic_parser)
 (action (diff ../good/logic_parser.opp.exp logic_parser.opp.out)))
(rule (target logic_parser.out) (deps ../good/logic_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias logic_parser)
 (action (diff ../good/logic_parser.exp logic_parser.out)))
(rule (target logtk.0.8.1-parse_theory.opp.out)
 (deps ../good/logtk.0.8.1-parse_theory.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias logtk.0.8.1-parse_theory)
 (action
  (diff ../good/logtk.0.8.1-parse_theory.opp.exp
   logtk.0.8.1-parse_theory.opp.out)))
(rule (target logtk.0.8.1-parse_theory.out)
 (deps ../good/logtk.0.8.1-parse_theory.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias logtk.0.8.1-parse_theory)
 (action
  (diff ../good/logtk.0.8.1-parse_theory.exp logtk.0.8.1-parse_theory.out)))
(rule (target loop.opp.out) (deps ../good/loop.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias loop) (action (diff ../good/loop.opp.exp loop.opp.out)))
(rule (target loop.out) (deps ../good/loop.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias loop) (action (diff ../good/loop.exp loop.out)))
(rule (target lr-but-not-lalr.opp.out) (deps ../good/lr-but-not-lalr.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias lr-but-not-lalr)
 (action (diff ../good/lr-but-not-lalr.opp.exp lr-but-not-lalr.opp.out)))
(rule (target lr-but-not-lalr.out) (deps ../good/lr-but-not-lalr.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias lr-but-not-lalr)
 (action (diff ../good/lr-but-not-lalr.exp lr-but-not-lalr.out)))
(rule (target ltlparser.opp.out) (deps ../good/ltlparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ltlparser)
 (action (diff ../good/ltlparser.opp.exp ltlparser.opp.out)))
(rule (target ltlparser.out) (deps ../good/ltlparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ltlparser) (action (diff ../good/ltlparser.exp ltlparser.out)))
(rule (target lustre-v6.1.737-lv6parser.opp.out)
 (deps ../good/lustre-v6.1.737-lv6parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias lustre-v6.1.737-lv6parser)
 (action
  (diff ../good/lustre-v6.1.737-lv6parser.opp.exp
   lustre-v6.1.737-lv6parser.opp.out)))
(rule (target lustre-v6.1.737-lv6parser.out)
 (deps ../good/lustre-v6.1.737-lv6parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias lustre-v6.1.737-lv6parser)
 (action
  (diff ../good/lustre-v6.1.737-lv6parser.exp lustre-v6.1.737-lv6parser.out)))
(rule (target lustreParser.opp.out) (deps ../good/lustreParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias lustreParser)
 (action (diff ../good/lustreParser.opp.exp lustreParser.opp.out)))
(rule (target lustreParser.out) (deps ../good/lustreParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias lustreParser)
 (action (diff ../good/lustreParser.exp lustreParser.out)))
(rule (target lutin.2.56-lutParser.opp.out)
 (deps ../good/lutin.2.56-lutParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias lutin.2.56-lutParser)
 (action
  (diff ../good/lutin.2.56-lutParser.opp.exp lutin.2.56-lutParser.opp.out)))
(rule (target lutin.2.56-lutParser.out)
 (deps ../good/lutin.2.56-lutParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias lutin.2.56-lutParser)
 (action (diff ../good/lutin.2.56-lutParser.exp lutin.2.56-lutParser.out)))
(rule (target macrodown.opp.out) (deps ../good/macrodown.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias macrodown)
 (action (diff ../good/macrodown.opp.exp macrodown.opp.out)))
(rule (target macrodown.out) (deps ../good/macrodown.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias macrodown) (action (diff ../good/macrodown.exp macrodown.out)))
(rule (target maple.opp.out) (deps ../good/maple.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias maple) (action (diff ../good/maple.opp.exp maple.opp.out)))
(rule (target maple.out) (deps ../good/maple.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias maple) (action (diff ../good/maple.exp maple.out)))
(rule (target mcc-fc.opp.out) (deps ../good/mcc-fc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-fc) (action (diff ../good/mcc-fc.opp.exp mcc-fc.opp.out)))
(rule (target mcc-fc.out) (deps ../good/mcc-fc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-fc) (action (diff ../good/mcc-fc.exp mcc-fc.out)))
(rule (target mcc-fj.opp.out) (deps ../good/mcc-fj.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-fj) (action (diff ../good/mcc-fj.opp.exp mcc-fj.opp.out)))
(rule (target mcc-fj.out) (deps ../good/mcc-fj.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-fj) (action (diff ../good/mcc-fj.exp mcc-fj.out)))
(rule (target mcc-frontends.opp.out) (deps ../good/mcc-frontends.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-frontends)
 (action (diff ../good/mcc-frontends.opp.exp mcc-frontends.opp.out)))
(rule (target mcc-frontends.out) (deps ../good/mcc-frontends.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-frontends)
 (action (diff ../good/mcc-frontends.exp mcc-frontends.out)))
(rule (target mcc-mc.opp.out) (deps ../good/mcc-mc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-mc) (action (diff ../good/mcc-mc.opp.exp mcc-mc.opp.out)))
(rule (target mcc-mc.out) (deps ../good/mcc-mc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-mc) (action (diff ../good/mcc-mc.exp mcc-mc.out)))
(rule (target mcc-moogle.opp.out) (deps ../good/mcc-moogle.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-moogle)
 (action (diff ../good/mcc-moogle.opp.exp mcc-moogle.opp.out)))
(rule (target mcc-moogle.out) (deps ../good/mcc-moogle.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-moogle)
 (action (diff ../good/mcc-moogle.exp mcc-moogle.out)))
(rule (target mcc-naml.opp.out) (deps ../good/mcc-naml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-naml)
 (action (diff ../good/mcc-naml.opp.exp mcc-naml.opp.out)))
(rule (target mcc-naml.out) (deps ../good/mcc-naml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-naml) (action (diff ../good/mcc-naml.exp mcc-naml.out)))
(rule (target mcc-pascal.opp.out) (deps ../good/mcc-pascal.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-pascal)
 (action (diff ../good/mcc-pascal.opp.exp mcc-pascal.opp.out)))
(rule (target mcc-pascal.out) (deps ../good/mcc-pascal.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-pascal)
 (action (diff ../good/mcc-pascal.exp mcc-pascal.out)))
(rule (target mcc-pasqual.opp.out) (deps ../good/mcc-pasqual.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-pasqual)
 (action (diff ../good/mcc-pasqual.opp.exp mcc-pasqual.opp.out)))
(rule (target mcc-pasqual.out) (deps ../good/mcc-pasqual.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-pasqual)
 (action (diff ../good/mcc-pasqual.exp mcc-pasqual.out)))
(rule (target mcc-phobos.opp.out) (deps ../good/mcc-phobos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-phobos)
 (action (diff ../good/mcc-phobos.opp.exp mcc-phobos.opp.out)))
(rule (target mcc-phobos.out) (deps ../good/mcc-phobos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-phobos)
 (action (diff ../good/mcc-phobos.exp mcc-phobos.out)))
(rule (target mcc-prof.opp.out) (deps ../good/mcc-prof.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-prof)
 (action (diff ../good/mcc-prof.opp.exp mcc-prof.opp.out)))
(rule (target mcc-prof.out) (deps ../good/mcc-prof.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-prof) (action (diff ../good/mcc-prof.exp mcc-prof.out)))
(rule (target mcc-python.opp.out) (deps ../good/mcc-python.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mcc-python)
 (action (diff ../good/mcc-python.opp.exp mcc-python.opp.out)))
(rule (target mcc-python.out) (deps ../good/mcc-python.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mcc-python)
 (action (diff ../good/mcc-python.exp mcc-python.out)))
(rule (target memcad.1.0.0-mc_parser.opp.out)
 (deps ../good/memcad.1.0.0-mc_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias memcad.1.0.0-mc_parser)
 (action
  (diff ../good/memcad.1.0.0-mc_parser.opp.exp
   memcad.1.0.0-mc_parser.opp.out)))
(rule (target memcad.1.0.0-mc_parser.out)
 (deps ../good/memcad.1.0.0-mc_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias memcad.1.0.0-mc_parser)
 (action
  (diff ../good/memcad.1.0.0-mc_parser.exp memcad.1.0.0-mc_parser.out)))
(rule (target metaocaml.opp.out) (deps ../good/metaocaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias metaocaml)
 (action (diff ../good/metaocaml.opp.exp metaocaml.opp.out)))
(rule (target metaocaml.out) (deps ../good/metaocaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias metaocaml) (action (diff ../good/metaocaml.exp metaocaml.out)))
(rule (target mezzo.opp.out) (deps ../good/mezzo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess %{read-lines:../good/mezzo.flags} %{deps})))))
(rule (alias mezzo) (action (diff ../good/mezzo.opp.exp mezzo.opp.out)))
(rule (target mezzo.out) (deps ../good/mezzo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/mezzo.flags} --explain -lg 2 -la 2 -lc 2
     %{deps})))))
(rule (alias mezzo) (action (diff ../good/mezzo.exp mezzo.out)))
(rule (target miniCparser.opp.out) (deps ../good/miniCparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias miniCparser)
 (action (diff ../good/miniCparser.opp.exp miniCparser.opp.out)))
(rule (target miniCparser.out) (deps ../good/miniCparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias miniCparser)
 (action (diff ../good/miniCparser.exp miniCparser.out)))
(rule (target miniMLparser.opp.out) (deps ../good/miniMLparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias miniMLparser)
 (action (diff ../good/miniMLparser.opp.exp miniMLparser.opp.out)))
(rule (target miniMLparser.out) (deps ../good/miniMLparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias miniMLparser)
 (action (diff ../good/miniMLparser.exp miniMLparser.out)))
(rule (target mlpost.0.8.2-pfb_parser.opp.out)
 (deps ../good/mlpost.0.8.2-pfb_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mlpost.0.8.2-pfb_parser)
 (action
  (diff ../good/mlpost.0.8.2-pfb_parser.opp.exp
   mlpost.0.8.2-pfb_parser.opp.out)))
(rule (target mlpost.0.8.2-pfb_parser.out)
 (deps ../good/mlpost.0.8.2-pfb_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mlpost.0.8.2-pfb_parser)
 (action
  (diff ../good/mlpost.0.8.2-pfb_parser.exp mlpost.0.8.2-pfb_parser.out)))
(rule (target modelica.opp.out) (deps ../good/modelica.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias modelica)
 (action (diff ../good/modelica.opp.exp modelica.opp.out)))
(rule (target modelica.out) (deps ../good/modelica.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias modelica) (action (diff ../good/modelica.exp modelica.out)))
(rule (target modelyze.opp.out) (deps ../good/modelyze.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias modelyze)
 (action (diff ../good/modelyze.opp.exp modelyze.opp.out)))
(rule (target modelyze.out) (deps ../good/modelyze.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias modelyze) (action (diff ../good/modelyze.exp modelyze.out)))
(rule (target modulo.opp.out) (deps ../good/modulo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias modulo) (action (diff ../good/modulo.opp.exp modulo.opp.out)))
(rule (target modulo.out) (deps ../good/modulo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias modulo) (action (diff ../good/modulo.exp modulo.out)))
(rule (target morbig.0.9.1-parser.opp.out)
 (deps ../good/morbig.0.9.1-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias morbig.0.9.1-parser)
 (action
  (diff ../good/morbig.0.9.1-parser.opp.exp morbig.0.9.1-parser.opp.out)))
(rule (target morbig.0.9.1-parser.out) (deps ../good/morbig.0.9.1-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias morbig.0.9.1-parser)
 (action (diff ../good/morbig.0.9.1-parser.exp morbig.0.9.1-parser.out)))
(rule (target mpri.opp.out) (deps ../good/mpri.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias mpri) (action (diff ../good/mpri.opp.exp mpri.opp.out)))
(rule (target mpri.out) (deps ../good/mpri.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias mpri) (action (diff ../good/mpri.exp mpri.out)))
(rule (target multi-token-alias-0.opp.out)
 (deps ../good/multi-token-alias-0.mly ../good/multi-token-alias-1.mly
  ../good/multi-token-alias-2.mly ../good/multi-token-alias-3.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess --base multi-token-alias-0 %{deps})))))
(rule (alias multi-token-alias-0)
 (action
  (diff ../good/multi-token-alias-0.opp.exp multi-token-alias-0.opp.out)))
(rule (target multi-token-alias-0.out)
 (deps ../good/multi-token-alias-0.mly ../good/multi-token-alias-1.mly
  ../good/multi-token-alias-2.mly ../good/multi-token-alias-3.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base multi-token-alias-0 --explain -lg 2 -la 2 -lc 2
     %{deps})))))
(rule (alias multi-token-alias-0)
 (action (diff ../good/multi-token-alias-0.exp multi-token-alias-0.out)))
(rule (target multiple-functor.opp.out) (deps ../good/multiple-functor.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias multiple-functor)
 (action (diff ../good/multiple-functor.opp.exp multiple-functor.opp.out)))
(rule (target multiple-functor.out) (deps ../good/multiple-functor.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias multiple-functor)
 (action (diff ../good/multiple-functor.exp multiple-functor.out)))
(rule (target name-clash-1.opp.out)
 (deps ../good/name-clash-1.mly ../good/name-clash-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess --base name-clash-1 %{deps})))))
(rule (alias name-clash-1)
 (action (diff ../good/name-clash-1.opp.exp name-clash-1.opp.out)))
(rule (target name-clash-1.out)
 (deps ../good/name-clash-1.mly ../good/name-clash-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base name-clash-1 --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias name-clash-1)
 (action (diff ../good/name-clash-1.exp name-clash-1.out)))
(rule (target netsem.opp.out) (deps ../good/netsem.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias netsem) (action (diff ../good/netsem.opp.exp netsem.opp.out)))
(rule (target netsem.out) (deps ../good/netsem.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias netsem) (action (diff ../good/netsem.exp netsem.out)))
(rule (target nexus.opp.out) (deps ../good/nexus.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias nexus) (action (diff ../good/nexus.opp.exp nexus.opp.out)))
(rule (target nexus.out) (deps ../good/nexus.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias nexus) (action (diff ../good/nexus.exp nexus.out)))
(rule (target nml-ip-parser.opp.out) (deps ../good/nml-ip-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias nml-ip-parser)
 (action (diff ../good/nml-ip-parser.opp.exp nml-ip-parser.opp.out)))
(rule (target nml-ip-parser.out) (deps ../good/nml-ip-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias nml-ip-parser)
 (action (diff ../good/nml-ip-parser.exp nml-ip-parser.out)))
(rule (target no-end-of-stream-conflict.opp.out)
 (deps ../good/no-end-of-stream-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias no-end-of-stream-conflict)
 (action
  (diff ../good/no-end-of-stream-conflict.opp.exp
   no-end-of-stream-conflict.opp.out)))
(rule (target no-end-of-stream-conflict.out)
 (deps ../good/no-end-of-stream-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias no-end-of-stream-conflict)
 (action
  (diff ../good/no-end-of-stream-conflict.exp no-end-of-stream-conflict.out)))
(rule (target no_future.opp.out) (deps ../good/no_future.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias no_future)
 (action (diff ../good/no_future.opp.exp no_future.opp.out)))
(rule (target no_future.out) (deps ../good/no_future.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias no_future) (action (diff ../good/no_future.exp no_future.out)))
(rule (target nunchaku.0.6-Parser.opp.out)
 (deps ../good/nunchaku.0.6-Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias nunchaku.0.6-Parser)
 (action
  (diff ../good/nunchaku.0.6-Parser.opp.exp nunchaku.0.6-Parser.opp.out)))
(rule (target nunchaku.0.6-Parser.out) (deps ../good/nunchaku.0.6-Parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias nunchaku.0.6-Parser)
 (action (diff ../good/nunchaku.0.6-Parser.exp nunchaku.0.6-Parser.out)))
(rule (target nunchaku.0.6-TPTP_parser.opp.out)
 (deps ../good/nunchaku.0.6-TPTP_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias nunchaku.0.6-TPTP_parser)
 (action
  (diff ../good/nunchaku.0.6-TPTP_parser.opp.exp
   nunchaku.0.6-TPTP_parser.opp.out)))
(rule (target nunchaku.0.6-TPTP_parser.out)
 (deps ../good/nunchaku.0.6-TPTP_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias nunchaku.0.6-TPTP_parser)
 (action
  (diff ../good/nunchaku.0.6-TPTP_parser.exp nunchaku.0.6-TPTP_parser.out)))
(rule (target nunchaku.0.6-Tip_parser.opp.out)
 (deps ../good/nunchaku.0.6-Tip_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias nunchaku.0.6-Tip_parser)
 (action
  (diff ../good/nunchaku.0.6-Tip_parser.opp.exp
   nunchaku.0.6-Tip_parser.opp.out)))
(rule (target nunchaku.0.6-Tip_parser.out)
 (deps ../good/nunchaku.0.6-Tip_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias nunchaku.0.6-Tip_parser)
 (action
  (diff ../good/nunchaku.0.6-Tip_parser.exp nunchaku.0.6-Tip_parser.out)))
(rule (target obc.opp.out) (deps ../good/obc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias obc) (action (diff ../good/obc.opp.exp obc.opp.out)))
(rule (target obc.out) (deps ../good/obc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias obc) (action (diff ../good/obc.exp obc.out)))
(rule (target obc-sym.opp.out) (deps ../good/obc-sym.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias obc-sym)
 (action (diff ../good/obc-sym.opp.exp obc-sym.opp.out)))
(rule (target obc-sym.out) (deps ../good/obc-sym.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias obc-sym) (action (diff ../good/obc-sym.exp obc-sym.out)))
(rule (target obelisk.0.3.2-zelus.opp.out)
 (deps ../good/obelisk.0.3.2-zelus.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias obelisk.0.3.2-zelus)
 (action
  (diff ../good/obelisk.0.3.2-zelus.opp.exp obelisk.0.3.2-zelus.opp.out)))
(rule (target obelisk.0.3.2-zelus.out) (deps ../good/obelisk.0.3.2-zelus.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias obelisk.0.3.2-zelus)
 (action (diff ../good/obelisk.0.3.2-zelus.exp obelisk.0.3.2-zelus.out)))
(rule (target ocaml.opp.out) (deps ../good/ocaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess %{read-lines:../good/ocaml.flags} %{deps})))))
(rule (alias ocaml) (action (diff ../good/ocaml.opp.exp ocaml.opp.out)))
(rule (target ocaml.out) (deps ../good/ocaml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/ocaml.flags} --explain -lg 2 -la 2 -lc 2
     %{deps})))))
(rule (alias ocaml) (action (diff ../good/ocaml.exp ocaml.out)))
(rule (target ocaml-base-compiler.4.07.1-parsecmm.opp.out)
 (deps ../good/ocaml-base-compiler.4.07.1-parsecmm.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocaml-base-compiler.4.07.1-parsecmm)
 (action
  (diff ../good/ocaml-base-compiler.4.07.1-parsecmm.opp.exp
   ocaml-base-compiler.4.07.1-parsecmm.opp.out)))
(rule (target ocaml-base-compiler.4.07.1-parsecmm.out)
 (deps ../good/ocaml-base-compiler.4.07.1-parsecmm.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocaml-base-compiler.4.07.1-parsecmm)
 (action
  (diff ../good/ocaml-base-compiler.4.07.1-parsecmm.exp
   ocaml-base-compiler.4.07.1-parsecmm.out)))
(rule (target ocaml-debugger.opp.out) (deps ../good/ocaml-debugger.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocaml-debugger)
 (action (diff ../good/ocaml-debugger.opp.exp ocaml-debugger.opp.out)))
(rule (target ocaml-debugger.out) (deps ../good/ocaml-debugger.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocaml-debugger)
 (action (diff ../good/ocaml-debugger.exp ocaml-debugger.out)))
(rule (target ocaml-lex.opp.out) (deps ../good/ocaml-lex.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocaml-lex)
 (action (diff ../good/ocaml-lex.opp.exp ocaml-lex.opp.out)))
(rule (target ocaml-lex.out) (deps ../good/ocaml-lex.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocaml-lex) (action (diff ../good/ocaml-lex.exp ocaml-lex.out)))
(rule (target ocaml-protoc.1.2.0-pb_parsing_parser.opp.out)
 (deps ../good/ocaml-protoc.1.2.0-pb_parsing_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocaml-protoc.1.2.0-pb_parsing_parser)
 (action
  (diff ../good/ocaml-protoc.1.2.0-pb_parsing_parser.opp.exp
   ocaml-protoc.1.2.0-pb_parsing_parser.opp.out)))
(rule (target ocaml-protoc.1.2.0-pb_parsing_parser.out)
 (deps ../good/ocaml-protoc.1.2.0-pb_parsing_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocaml-protoc.1.2.0-pb_parsing_parser)
 (action
  (diff ../good/ocaml-protoc.1.2.0-pb_parsing_parser.exp
   ocaml-protoc.1.2.0-pb_parsing_parser.out)))
(rule (target ocaml-test-Lex.opp.out) (deps ../good/ocaml-test-Lex.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocaml-test-Lex)
 (action (diff ../good/ocaml-test-Lex.opp.exp ocaml-test-Lex.opp.out)))
(rule (target ocaml-test-Lex.out) (deps ../good/ocaml-test-Lex.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocaml-test-Lex)
 (action (diff ../good/ocaml-test-Lex.exp ocaml-test-Lex.out)))
(rule (target ocaml-testasmcomp-cmm.opp.out)
 (deps ../good/ocaml-testasmcomp-cmm.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocaml-testasmcomp-cmm)
 (action
  (diff ../good/ocaml-testasmcomp-cmm.opp.exp ocaml-testasmcomp-cmm.opp.out)))
(rule (target ocaml-testasmcomp-cmm.out)
 (deps ../good/ocaml-testasmcomp-cmm.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocaml-testasmcomp-cmm)
 (action (diff ../good/ocaml-testasmcomp-cmm.exp ocaml-testasmcomp-cmm.out)))
(rule (target ocaml_parser_menhir.opp.out)
 (deps ../good/ocaml_parser_menhir.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess
     %{read-lines:../good/ocaml_parser_menhir.flags} %{deps})))))
(rule (alias ocaml_parser_menhir)
 (action
  (diff ../good/ocaml_parser_menhir.opp.exp ocaml_parser_menhir.opp.out)))
(rule (target ocaml_parser_menhir.out) (deps ../good/ocaml_parser_menhir.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/ocaml_parser_menhir.flags} --explain -lg
     2 -la 2 -lc 2 %{deps})))))
(rule (alias ocaml_parser_menhir)
 (action (diff ../good/ocaml_parser_menhir.exp ocaml_parser_menhir.out)))
(rule (target ocamldoc-odoc.opp.out) (deps ../good/ocamldoc-odoc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocamldoc-odoc)
 (action (diff ../good/ocamldoc-odoc.opp.exp ocamldoc-odoc.opp.out)))
(rule (target ocamldoc-odoc.out) (deps ../good/ocamldoc-odoc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocamldoc-odoc)
 (action (diff ../good/ocamldoc-odoc.exp ocamldoc-odoc.out)))
(rule (target ocamldoc-odoc_text.opp.out)
 (deps ../good/ocamldoc-odoc_text.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocamldoc-odoc_text)
 (action
  (diff ../good/ocamldoc-odoc_text.opp.exp ocamldoc-odoc_text.opp.out)))
(rule (target ocamldoc-odoc_text.out) (deps ../good/ocamldoc-odoc_text.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocamldoc-odoc_text)
 (action (diff ../good/ocamldoc-odoc_text.exp ocamldoc-odoc_text.out)))
(rule (target ocamlweb-yacc.opp.out) (deps ../good/ocamlweb-yacc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocamlweb-yacc)
 (action (diff ../good/ocamlweb-yacc.opp.exp ocamlweb-yacc.opp.out)))
(rule (target ocamlweb-yacc.out) (deps ../good/ocamlweb-yacc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocamlweb-yacc)
 (action (diff ../good/ocamlweb-yacc.exp ocamlweb-yacc.out)))
(rule (target ocapic.3.3-parser.opp.out) (deps ../good/ocapic.3.3-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ocapic.3.3-parser)
 (action (diff ../good/ocapic.3.3-parser.opp.exp ocapic.3.3-parser.opp.out)))
(rule (target ocapic.3.3-parser.out) (deps ../good/ocapic.3.3-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ocapic.3.3-parser)
 (action (diff ../good/ocapic.3.3-parser.exp ocapic.3.3-parser.out)))
(rule (target oclisp.opp.out) (deps ../good/oclisp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias oclisp) (action (diff ../good/oclisp.opp.exp oclisp.opp.out)))
(rule (target oclisp.out) (deps ../good/oclisp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias oclisp) (action (diff ../good/oclisp.exp oclisp.out)))
(rule (target octavius.1.2.0-octParser.opp.out)
 (deps ../good/octavius.1.2.0-octParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias octavius.1.2.0-octParser)
 (action
  (diff ../good/octavius.1.2.0-octParser.opp.exp
   octavius.1.2.0-octParser.opp.out)))
(rule (target octavius.1.2.0-octParser.out)
 (deps ../good/octavius.1.2.0-octParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias octavius.1.2.0-octParser)
 (action
  (diff ../good/octavius.1.2.0-octParser.exp octavius.1.2.0-octParser.out)))
(rule (target odds.1.0-parser.opp.out) (deps ../good/odds.1.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias odds.1.0-parser)
 (action (diff ../good/odds.1.0-parser.opp.exp odds.1.0-parser.opp.out)))
(rule (target odds.1.0-parser.out) (deps ../good/odds.1.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias odds.1.0-parser)
 (action (diff ../good/odds.1.0-parser.exp odds.1.0-parser.out)))
(rule (target oflux.opp.out) (deps ../good/oflux.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias oflux) (action (diff ../good/oflux.opp.exp oflux.opp.out)))
(rule (target oflux.out) (deps ../good/oflux.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias oflux) (action (diff ../good/oflux.exp oflux.out)))
(rule (target ojacare.opp.out) (deps ../good/ojacare.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ojacare)
 (action (diff ../good/ojacare.opp.exp ojacare.opp.out)))
(rule (target ojacare.out) (deps ../good/ojacare.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ojacare) (action (diff ../good/ojacare.exp ojacare.out)))
(rule (target ollvm.0.99-ollvm_parser.opp.out)
 (deps ../good/ollvm.0.99-ollvm_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ollvm.0.99-ollvm_parser)
 (action
  (diff ../good/ollvm.0.99-ollvm_parser.opp.exp
   ollvm.0.99-ollvm_parser.opp.out)))
(rule (target ollvm.0.99-ollvm_parser.out)
 (deps ../good/ollvm.0.99-ollvm_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ollvm.0.99-ollvm_parser)
 (action
  (diff ../good/ollvm.0.99-ollvm_parser.exp ollvm.0.99-ollvm_parser.out)))
(rule (target omake.0.9.8.7-omake_shell_parse.opp.out)
 (deps ../good/omake.0.9.8.7-omake_shell_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias omake.0.9.8.7-omake_shell_parse)
 (action
  (diff ../good/omake.0.9.8.7-omake_shell_parse.opp.exp
   omake.0.9.8.7-omake_shell_parse.opp.out)))
(rule (target omake.0.9.8.7-omake_shell_parse.out)
 (deps ../good/omake.0.9.8.7-omake_shell_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias omake.0.9.8.7-omake_shell_parse)
 (action
  (diff ../good/omake.0.9.8.7-omake_shell_parse.exp
   omake.0.9.8.7-omake_shell_parse.out)))
(rule (target omake_ast_parse.opp.out) (deps ../good/omake_ast_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias omake_ast_parse)
 (action (diff ../good/omake_ast_parse.opp.exp omake_ast_parse.opp.out)))
(rule (target omake_ast_parse.out) (deps ../good/omake_ast_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias omake_ast_parse)
 (action (diff ../good/omake_ast_parse.exp omake_ast_parse.out)))
(rule (target omake_shell_parse.opp.out) (deps ../good/omake_shell_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias omake_shell_parse)
 (action (diff ../good/omake_shell_parse.opp.exp omake_shell_parse.opp.out)))
(rule (target omake_shell_parse.out) (deps ../good/omake_shell_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias omake_shell_parse)
 (action (diff ../good/omake_shell_parse.exp omake_shell_parse.out)))
(rule (target on-error-reduce-inlined.opp.out)
 (deps ../good/on-error-reduce-inlined.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias on-error-reduce-inlined)
 (action
  (diff ../good/on-error-reduce-inlined.opp.exp
   on-error-reduce-inlined.opp.out)))
(rule (target on-error-reduce-inlined.out)
 (deps ../good/on-error-reduce-inlined.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias on-error-reduce-inlined)
 (action
  (diff ../good/on-error-reduce-inlined.exp on-error-reduce-inlined.out)))
(rule (target on-error-reduce-unreachable.opp.out)
 (deps ../good/on-error-reduce-unreachable.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias on-error-reduce-unreachable)
 (action
  (diff ../good/on-error-reduce-unreachable.opp.exp
   on-error-reduce-unreachable.opp.out)))
(rule (target on-error-reduce-unreachable.out)
 (deps ../good/on-error-reduce-unreachable.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias on-error-reduce-unreachable)
 (action
  (diff ../good/on-error-reduce-unreachable.exp
   on-error-reduce-unreachable.out)))
(rule (target opam-doc.0.9.3-info_parser.opp.out)
 (deps ../good/opam-doc.0.9.3-info_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias opam-doc.0.9.3-info_parser)
 (action
  (diff ../good/opam-doc.0.9.3-info_parser.opp.exp
   opam-doc.0.9.3-info_parser.opp.out)))
(rule (target opam-doc.0.9.3-info_parser.out)
 (deps ../good/opam-doc.0.9.3-info_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias opam-doc.0.9.3-info_parser)
 (action
  (diff ../good/opam-doc.0.9.3-info_parser.exp
   opam-doc.0.9.3-info_parser.out)))
(rule (target option2.opp.out) (deps ../good/option2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias option2)
 (action (diff ../good/option2.opp.exp option2.opp.out)))
(rule (target option2.out) (deps ../good/option2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias option2) (action (diff ../good/option2.exp option2.out)))
(rule (target options.opp.out) (deps ../good/options.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias options)
 (action (diff ../good/options.opp.exp options.opp.out)))
(rule (target options.out) (deps ../good/options.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias options) (action (diff ../good/options.exp options.out)))
(rule (target orpie.1.6.0-txtin_parser.opp.out)
 (deps ../good/orpie.1.6.0-txtin_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias orpie.1.6.0-txtin_parser)
 (action
  (diff ../good/orpie.1.6.0-txtin_parser.opp.exp
   orpie.1.6.0-txtin_parser.opp.out)))
(rule (target orpie.1.6.0-txtin_parser.out)
 (deps ../good/orpie.1.6.0-txtin_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias orpie.1.6.0-txtin_parser)
 (action
  (diff ../good/orpie.1.6.0-txtin_parser.exp orpie.1.6.0-txtin_parser.out)))
(rule (target osdp.0.6.0-pa_parser.opp.out)
 (deps ../good/osdp.0.6.0-pa_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias osdp.0.6.0-pa_parser)
 (action
  (diff ../good/osdp.0.6.0-pa_parser.opp.exp osdp.0.6.0-pa_parser.opp.out)))
(rule (target osdp.0.6.0-pa_parser.out)
 (deps ../good/osdp.0.6.0-pa_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias osdp.0.6.0-pa_parser)
 (action (diff ../good/osdp.0.6.0-pa_parser.exp osdp.0.6.0-pa_parser.out)))
(rule (target pager.opp.out) (deps ../good/pager.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias pager) (action (diff ../good/pager.opp.exp pager.opp.out)))
(rule (target pager.out) (deps ../good/pager.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias pager) (action (diff ../good/pager.exp pager.out)))
(rule (target pair-new-syntax.opp.out) (deps ../good/pair-new-syntax.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias pair-new-syntax)
 (action (diff ../good/pair-new-syntax.opp.exp pair-new-syntax.opp.out)))
(rule (target pair-new-syntax.out) (deps ../good/pair-new-syntax.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias pair-new-syntax)
 (action (diff ../good/pair-new-syntax.exp pair-new-syntax.out)))
(rule (target parameterized-nonterminal.opp.out)
 (deps ../good/parameterized-nonterminal.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parameterized-nonterminal)
 (action
  (diff ../good/parameterized-nonterminal.opp.exp
   parameterized-nonterminal.opp.out)))
(rule (target parameterized-nonterminal.out)
 (deps ../good/parameterized-nonterminal.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parameterized-nonterminal)
 (action
  (diff ../good/parameterized-nonterminal.exp parameterized-nonterminal.out)))
(rule (target parse_xquery.opp.out) (deps ../good/parse_xquery.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parse_xquery)
 (action (diff ../good/parse_xquery.opp.exp parse_xquery.opp.out)))
(rule (target parse_xquery.out) (deps ../good/parse_xquery.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parse_xquery)
 (action (diff ../good/parse_xquery.exp parse_xquery.out)))
(rule (target parser_cocci_menhir.opp.out)
 (deps ../good/parser_cocci_menhir.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parser_cocci_menhir)
 (action
  (diff ../good/parser_cocci_menhir.opp.exp parser_cocci_menhir.opp.out)))
(rule (target parser_cocci_menhir.out) (deps ../good/parser_cocci_menhir.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parser_cocci_menhir)
 (action (diff ../good/parser_cocci_menhir.exp parser_cocci_menhir.out)))
(rule (target parser_cpp.opp.out) (deps ../good/parser_cpp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parser_cpp)
 (action (diff ../good/parser_cpp.opp.exp parser_cpp.opp.out)))
(rule (target parser_cpp.out) (deps ../good/parser_cpp.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parser_cpp)
 (action (diff ../good/parser_cpp.exp parser_cpp.out)))
(rule (target parser_css.opp.out) (deps ../good/parser_css.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parser_css)
 (action (diff ../good/parser_css.opp.exp parser_css.opp.out)))
(rule (target parser_css.out) (deps ../good/parser_css.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parser_css)
 (action (diff ../good/parser_css.exp parser_css.out)))
(rule (target parser_java.opp.out) (deps ../good/parser_java.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parser_java)
 (action (diff ../good/parser_java.opp.exp parser_java.opp.out)))
(rule (target parser_java.out) (deps ../good/parser_java.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parser_java)
 (action (diff ../good/parser_java.exp parser_java.out)))
(rule (target parser_js.opp.out) (deps ../good/parser_js.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parser_js)
 (action (diff ../good/parser_js.opp.exp parser_js.opp.out)))
(rule (target parser_js.out) (deps ../good/parser_js.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parser_js) (action (diff ../good/parser_js.exp parser_js.out)))
(rule (target parser_php.opp.out) (deps ../good/parser_php.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parser_php)
 (action (diff ../good/parser_php.opp.exp parser_php.opp.out)))
(rule (target parser_php.out) (deps ../good/parser_php.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parser_php)
 (action (diff ../good/parser_php.exp parser_php.out)))
(rule (target parser_raw.opp.out) (deps ../good/parser_raw.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias parser_raw)
 (action (diff ../good/parser_raw.opp.exp parser_raw.opp.out)))
(rule (target parser_raw.out) (deps ../good/parser_raw.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias parser_raw)
 (action (diff ../good/parser_raw.exp parser_raw.out)))
(rule (target permutation.opp.out) (deps ../good/permutation.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias permutation)
 (action (diff ../good/permutation.opp.exp permutation.opp.out)))
(rule (target permutation.out) (deps ../good/permutation.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias permutation)
 (action (diff ../good/permutation.exp permutation.out)))
(rule (target permutation-growth.opp.out)
 (deps ../good/permutation-growth.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias permutation-growth)
 (action
  (diff ../good/permutation-growth.opp.exp permutation-growth.opp.out)))
(rule (target permutation-growth.out) (deps ../good/permutation-growth.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias permutation-growth)
 (action (diff ../good/permutation-growth.exp permutation-growth.out)))
(rule (target petit-1.opp.out) (deps ../good/petit-1.mly ../good/petit-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess --base petit-1 %{deps})))))
(rule (alias petit-1)
 (action (diff ../good/petit-1.opp.exp petit-1.opp.out)))
(rule (target petit-1.out) (deps ../good/petit-1.mly ../good/petit-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base petit-1 --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias petit-1) (action (diff ../good/petit-1.exp petit-1.out)))
(rule (target photos.opp.out) (deps ../good/photos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias photos) (action (diff ../good/photos.opp.exp photos.opp.out)))
(rule (target photos.out) (deps ../good/photos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias photos) (action (diff ../good/photos.exp photos.out)))
(rule (target phpparser.opp.out) (deps ../good/phpparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias phpparser)
 (action (diff ../good/phpparser.opp.exp phpparser.opp.out)))
(rule (target phpparser.out) (deps ../good/phpparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias phpparser) (action (diff ../good/phpparser.exp phpparser.out)))
(rule (target pippijn.opp.out) (deps ../good/pippijn.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess %{read-lines:../good/pippijn.flags}
     %{deps})))))
(rule (alias pippijn)
 (action (diff ../good/pippijn.opp.exp pippijn.opp.out)))
(rule (target pippijn.out) (deps ../good/pippijn.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/pippijn.flags} --explain -lg 2 -la 2 -lc
     2 %{deps})))))
(rule (alias pippijn) (action (diff ../good/pippijn.exp pippijn.out)))
(rule (target pre_parser.opp.out) (deps ../good/pre_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess %{read-lines:../good/pre_parser.flags}
     %{deps})))))
(rule (alias pre_parser)
 (action (diff ../good/pre_parser.opp.exp pre_parser.opp.out)))
(rule (target pre_parser.out) (deps ../good/pre_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/pre_parser.flags} --explain -lg 2 -la 2
     -lc 2 %{deps})))))
(rule (alias pre_parser)
 (action (diff ../good/pre_parser.exp pre_parser.out)))
(rule (target prec_inline.opp.out) (deps ../good/prec_inline.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias prec_inline)
 (action (diff ../good/prec_inline.opp.exp prec_inline.opp.out)))
(rule (target prec_inline.out) (deps ../good/prec_inline.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias prec_inline)
 (action (diff ../good/prec_inline.exp prec_inline.out)))
(rule (target private-and-public-1.opp.out)
 (deps ../good/private-and-public-1.mly ../good/private-and-public-2.mly
  ../good/private-and-public-3.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess --base private-and-public-1 %{deps})))))
(rule (alias private-and-public-1)
 (action
  (diff ../good/private-and-public-1.opp.exp private-and-public-1.opp.out)))
(rule (target private-and-public-1.out)
 (deps ../good/private-and-public-1.mly ../good/private-and-public-2.mly
  ../good/private-and-public-3.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base private-and-public-1 --explain -lg 2 -la 2 -lc 2
     %{deps})))))
(rule (alias private-and-public-1)
 (action (diff ../good/private-and-public-1.exp private-and-public-1.out)))
(rule (target promelaparser.opp.out) (deps ../good/promelaparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias promelaparser)
 (action (diff ../good/promelaparser.opp.exp promelaparser.opp.out)))
(rule (target promelaparser.out) (deps ../good/promelaparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias promelaparser)
 (action (diff ../good/promelaparser.exp promelaparser.out)))
(rule (target promelaparser_withexps.opp.out)
 (deps ../good/promelaparser_withexps.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias promelaparser_withexps)
 (action
  (diff ../good/promelaparser_withexps.opp.exp
   promelaparser_withexps.opp.out)))
(rule (target promelaparser_withexps.out)
 (deps ../good/promelaparser_withexps.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias promelaparser_withexps)
 (action
  (diff ../good/promelaparser_withexps.exp promelaparser_withexps.out)))
(rule (target prooflang.opp.out) (deps ../good/prooflang.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias prooflang)
 (action (diff ../good/prooflang.opp.exp prooflang.opp.out)))
(rule (target prooflang.out) (deps ../good/prooflang.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias prooflang) (action (diff ../good/prooflang.exp prooflang.out)))
(rule (target proverif.2.00-parser.opp.out)
 (deps ../good/proverif.2.00-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias proverif.2.00-parser)
 (action
  (diff ../good/proverif.2.00-parser.opp.exp proverif.2.00-parser.opp.out)))
(rule (target proverif.2.00-parser.out)
 (deps ../good/proverif.2.00-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias proverif.2.00-parser)
 (action (diff ../good/proverif.2.00-parser.exp proverif.2.00-parser.out)))
(rule (target proverif.2.00-pitparser.opp.out)
 (deps ../good/proverif.2.00-pitparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias proverif.2.00-pitparser)
 (action
  (diff ../good/proverif.2.00-pitparser.opp.exp
   proverif.2.00-pitparser.opp.out)))
(rule (target proverif.2.00-pitparser.out)
 (deps ../good/proverif.2.00-pitparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias proverif.2.00-pitparser)
 (action
  (diff ../good/proverif.2.00-pitparser.exp proverif.2.00-pitparser.out)))
(rule (target psmt2-frontend.0.1-smtlib_parser.opp.out)
 (deps ../good/psmt2-frontend.0.1-smtlib_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias psmt2-frontend.0.1-smtlib_parser)
 (action
  (diff ../good/psmt2-frontend.0.1-smtlib_parser.opp.exp
   psmt2-frontend.0.1-smtlib_parser.opp.out)))
(rule (target psmt2-frontend.0.1-smtlib_parser.out)
 (deps ../good/psmt2-frontend.0.1-smtlib_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias psmt2-frontend.0.1-smtlib_parser)
 (action
  (diff ../good/psmt2-frontend.0.1-smtlib_parser.exp
   psmt2-frontend.0.1-smtlib_parser.out)))
(rule (target public-1.opp.out)
 (deps ../good/public-1.mly ../good/public-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess --base public-1 %{deps})))))
(rule (alias public-1)
 (action (diff ../good/public-1.opp.exp public-1.opp.out)))
(rule (target public-1.out) (deps ../good/public-1.mly ../good/public-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base public-1 --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias public-1) (action (diff ../good/public-1.exp public-1.out)))
(rule (target public-inline-1.opp.out)
 (deps ../good/public-inline-1.mly ../good/public-inline-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess --base public-inline-1 %{deps})))))
(rule (alias public-inline-1)
 (action (diff ../good/public-inline-1.opp.exp public-inline-1.opp.out)))
(rule (target public-inline-1.out)
 (deps ../good/public-inline-1.mly ../good/public-inline-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base public-inline-1 --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias public-inline-1)
 (action (diff ../good/public-inline-1.exp public-inline-1.out)))
(rule (target pxp-m2parsergen.opp.out) (deps ../good/pxp-m2parsergen.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias pxp-m2parsergen)
 (action (diff ../good/pxp-m2parsergen.opp.exp pxp-m2parsergen.opp.out)))
(rule (target pxp-m2parsergen.out) (deps ../good/pxp-m2parsergen.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias pxp-m2parsergen)
 (action (diff ../good/pxp-m2parsergen.exp pxp-m2parsergen.out)))
(rule (target pxp-ucs2_to_utf8.opp.out) (deps ../good/pxp-ucs2_to_utf8.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias pxp-ucs2_to_utf8)
 (action (diff ../good/pxp-ucs2_to_utf8.opp.exp pxp-ucs2_to_utf8.opp.out)))
(rule (target pxp-ucs2_to_utf8.out) (deps ../good/pxp-ucs2_to_utf8.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias pxp-ucs2_to_utf8)
 (action (diff ../good/pxp-ucs2_to_utf8.exp pxp-ucs2_to_utf8.out)))
(rule (target rdf_sparql_parser.opp.out) (deps ../good/rdf_sparql_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias rdf_sparql_parser)
 (action (diff ../good/rdf_sparql_parser.opp.exp rdf_sparql_parser.opp.out)))
(rule (target rdf_sparql_parser.out) (deps ../good/rdf_sparql_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias rdf_sparql_parser)
 (action (diff ../good/rdf_sparql_parser.exp rdf_sparql_parser.out)))
(rule (target reason.3.3.7-reason_parser.opp.out)
 (deps ../good/reason.3.3.7-reason_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias reason.3.3.7-reason_parser)
 (action
  (diff ../good/reason.3.3.7-reason_parser.opp.exp
   reason.3.3.7-reason_parser.opp.out)))
(rule (target reason.3.3.7-reason_parser.out)
 (deps ../good/reason.3.3.7-reason_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias reason.3.3.7-reason_parser)
 (action
  (diff ../good/reason.3.3.7-reason_parser.exp
   reason.3.3.7-reason_parser.out)))
(rule (target reason_parser.opp.out) (deps ../good/reason_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias reason_parser)
 (action (diff ../good/reason_parser.opp.exp reason_parser.opp.out)))
(rule (target reason_parser.out) (deps ../good/reason_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias reason_parser)
 (action (diff ../good/reason_parser.exp reason_parser.out)))
(rule (target regstab.2.0.0-parser.opp.out)
 (deps ../good/regstab.2.0.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias regstab.2.0.0-parser)
 (action
  (diff ../good/regstab.2.0.0-parser.opp.exp regstab.2.0.0-parser.opp.out)))
(rule (target regstab.2.0.0-parser.out)
 (deps ../good/regstab.2.0.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias regstab.2.0.0-parser)
 (action (diff ../good/regstab.2.0.0-parser.exp regstab.2.0.0-parser.out)))
(rule (target rfsm.1.0-main_parser.opp.out)
 (deps ../good/rfsm.1.0-main_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias rfsm.1.0-main_parser)
 (action
  (diff ../good/rfsm.1.0-main_parser.opp.exp rfsm.1.0-main_parser.opp.out)))
(rule (target rfsm.1.0-main_parser.out)
 (deps ../good/rfsm.1.0-main_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias rfsm.1.0-main_parser)
 (action (diff ../good/rfsm.1.0-main_parser.exp rfsm.1.0-main_parser.out)))
(rule (target rml.1.09.05-parser.opp.out)
 (deps ../good/rml.1.09.05-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias rml.1.09.05-parser)
 (action
  (diff ../good/rml.1.09.05-parser.opp.exp rml.1.09.05-parser.opp.out)))
(rule (target rml.1.09.05-parser.out) (deps ../good/rml.1.09.05-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias rml.1.09.05-parser)
 (action (diff ../good/rml.1.09.05-parser.exp rml.1.09.05-parser.out)))
(rule (target ruby18_parser.opp.out) (deps ../good/ruby18_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias ruby18_parser)
 (action (diff ../good/ruby18_parser.opp.exp ruby18_parser.opp.out)))
(rule (target ruby18_parser.out) (deps ../good/ruby18_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias ruby18_parser)
 (action (diff ../good/ruby18_parser.exp ruby18_parser.out)))
(rule (target sage.opp.out) (deps ../good/sage.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias sage) (action (diff ../good/sage.opp.exp sage.opp.out)))
(rule (target sage.out) (deps ../good/sage.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias sage) (action (diff ../good/sage.exp sage.out)))
(rule (target scilabParser.opp.out) (deps ../good/scilabParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias scilabParser)
 (action (diff ../good/scilabParser.opp.exp scilabParser.opp.out)))
(rule (target scilabParser.out) (deps ../good/scilabParser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias scilabParser)
 (action (diff ../good/scilabParser.exp scilabParser.out)))
(rule (target self.opp.out) (deps ../good/self.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias self) (action (diff ../good/self.opp.exp self.opp.out)))
(rule (target self.out) (deps ../good/self.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias self) (action (diff ../good/self.exp self.out)))
(rule (target sibylfs-lem.0.4.0-parser.opp.out)
 (deps ../good/sibylfs-lem.0.4.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias sibylfs-lem.0.4.0-parser)
 (action
  (diff ../good/sibylfs-lem.0.4.0-parser.opp.exp
   sibylfs-lem.0.4.0-parser.opp.out)))
(rule (target sibylfs-lem.0.4.0-parser.out)
 (deps ../good/sibylfs-lem.0.4.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias sibylfs-lem.0.4.0-parser)
 (action
  (diff ../good/sibylfs-lem.0.4.0-parser.exp sibylfs-lem.0.4.0-parser.out)))
(rule (target simnml.opp.out) (deps ../good/simnml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias simnml) (action (diff ../good/simnml.opp.exp simnml.opp.out)))
(rule (target simnml.out) (deps ../good/simnml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias simnml) (action (diff ../good/simnml.exp simnml.out)))
(rule (target simple-if-conflict.opp.out)
 (deps ../good/simple-if-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias simple-if-conflict)
 (action
  (diff ../good/simple-if-conflict.opp.exp simple-if-conflict.opp.out)))
(rule (target simple-if-conflict.out) (deps ../good/simple-if-conflict.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias simple-if-conflict)
 (action (diff ../good/simple-if-conflict.exp simple-if-conflict.out)))
(rule (target simple-if-conflict-no-eos.opp.out)
 (deps ../good/simple-if-conflict-no-eos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias simple-if-conflict-no-eos)
 (action
  (diff ../good/simple-if-conflict-no-eos.opp.exp
   simple-if-conflict-no-eos.opp.out)))
(rule (target simple-if-conflict-no-eos.out)
 (deps ../good/simple-if-conflict-no-eos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias simple-if-conflict-no-eos)
 (action
  (diff ../good/simple-if-conflict-no-eos.exp simple-if-conflict-no-eos.out)))
(rule (target spike.opp.out) (deps ../good/spike.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias spike) (action (diff ../good/spike.opp.exp spike.opp.out)))
(rule (target spike.out) (deps ../good/spike.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias spike) (action (diff ../good/spike.exp spike.out)))
(rule (target split-public-symbol.opp.out)
 (deps ../good/split-public-symbol.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias split-public-symbol)
 (action
  (diff ../good/split-public-symbol.opp.exp split-public-symbol.opp.out)))
(rule (target split-public-symbol.out) (deps ../good/split-public-symbol.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias split-public-symbol)
 (action (diff ../good/split-public-symbol.exp split-public-symbol.out)))
(rule (target split-public-symbol-with-renaming.opp.out)
 (deps ../good/split-public-symbol-with-renaming.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias split-public-symbol-with-renaming)
 (action
  (diff ../good/split-public-symbol-with-renaming.opp.exp
   split-public-symbol-with-renaming.opp.out)))
(rule (target split-public-symbol-with-renaming.out)
 (deps ../good/split-public-symbol-with-renaming.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias split-public-symbol-with-renaming)
 (action
  (diff ../good/split-public-symbol-with-renaming.exp
   split-public-symbol-with-renaming.out)))
(rule (target sqlgg.0.4.5-sql_parser.opp.out)
 (deps ../good/sqlgg.0.4.5-sql_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias sqlgg.0.4.5-sql_parser)
 (action
  (diff ../good/sqlgg.0.4.5-sql_parser.opp.exp
   sqlgg.0.4.5-sql_parser.opp.out)))
(rule (target sqlgg.0.4.5-sql_parser.out)
 (deps ../good/sqlgg.0.4.5-sql_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias sqlgg.0.4.5-sql_parser)
 (action
  (diff ../good/sqlgg.0.4.5-sql_parser.exp sqlgg.0.4.5-sql_parser.out)))
(rule (target statverif.1.97pl1.1-piparser.opp.out)
 (deps ../good/statverif.1.97pl1.1-piparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias statverif.1.97pl1.1-piparser)
 (action
  (diff ../good/statverif.1.97pl1.1-piparser.opp.exp
   statverif.1.97pl1.1-piparser.opp.out)))
(rule (target statverif.1.97pl1.1-piparser.out)
 (deps ../good/statverif.1.97pl1.1-piparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias statverif.1.97pl1.1-piparser)
 (action
  (diff ../good/statverif.1.97pl1.1-piparser.exp
   statverif.1.97pl1.1-piparser.out)))
(rule (target subiso.opp.out) (deps ../good/subiso.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias subiso) (action (diff ../good/subiso.opp.exp subiso.opp.out)))
(rule (target subiso.out) (deps ../good/subiso.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias subiso) (action (diff ../good/subiso.exp subiso.out)))
(rule (target subtle-conflict-pager.opp.out)
 (deps ../good/subtle-conflict-pager.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias subtle-conflict-pager)
 (action
  (diff ../good/subtle-conflict-pager.opp.exp subtle-conflict-pager.opp.out)))
(rule (target subtle-conflict-pager.out)
 (deps ../good/subtle-conflict-pager.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias subtle-conflict-pager)
 (action (diff ../good/subtle-conflict-pager.exp subtle-conflict-pager.out)))
(rule (target swdogen.0.1.0-swgparser.opp.out)
 (deps ../good/swdogen.0.1.0-swgparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias swdogen.0.1.0-swgparser)
 (action
  (diff ../good/swdogen.0.1.0-swgparser.opp.exp
   swdogen.0.1.0-swgparser.opp.out)))
(rule (target swdogen.0.1.0-swgparser.out)
 (deps ../good/swdogen.0.1.0-swgparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias swdogen.0.1.0-swgparser)
 (action
  (diff ../good/swdogen.0.1.0-swgparser.exp swdogen.0.1.0-swgparser.out)))
(rule (target symbolstartofs.opp.out) (deps ../good/symbolstartofs.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias symbolstartofs)
 (action (diff ../good/symbolstartofs.opp.exp symbolstartofs.opp.out)))
(rule (target symbolstartofs.out) (deps ../good/symbolstartofs.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias symbolstartofs)
 (action (diff ../good/symbolstartofs.exp symbolstartofs.out)))
(rule (target symbolstartpos.opp.out) (deps ../good/symbolstartpos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias symbolstartpos)
 (action (diff ../good/symbolstartpos.opp.exp symbolstartpos.opp.out)))
(rule (target symbolstartpos.out) (deps ../good/symbolstartpos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias symbolstartpos)
 (action (diff ../good/symbolstartpos.exp symbolstartpos.out)))
(rule (target sysver.opp.out) (deps ../good/sysver.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias sysver) (action (diff ../good/sysver.opp.exp sysver.opp.out)))
(rule (target sysver.out) (deps ../good/sysver.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias sysver) (action (diff ../good/sysver.exp sysver.out)))
(rule (target talparser.opp.out) (deps ../good/talparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias talparser)
 (action (diff ../good/talparser.opp.exp talparser.opp.out)))
(rule (target talparser.out) (deps ../good/talparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias talparser) (action (diff ../good/talparser.exp talparser.out)))
(rule (target tilde-used-warning.opp.out)
 (deps ../good/tilde-used-warning.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias tilde-used-warning)
 (action
  (diff ../good/tilde-used-warning.opp.exp tilde-used-warning.opp.out)))
(rule (target tilde-used-warning.out) (deps ../good/tilde-used-warning.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias tilde-used-warning)
 (action (diff ../good/tilde-used-warning.exp tilde-used-warning.out)))
(rule (target tony-rc_parse.opp.out) (deps ../good/tony-rc_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias tony-rc_parse)
 (action (diff ../good/tony-rc_parse.opp.exp tony-rc_parse.opp.out)))
(rule (target tony-rc_parse.out) (deps ../good/tony-rc_parse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias tony-rc_parse)
 (action (diff ../good/tony-rc_parse.exp tony-rc_parse.out)))
(rule (target tony-xmlparse.opp.out) (deps ../good/tony-xmlparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias tony-xmlparse)
 (action (diff ../good/tony-xmlparse.opp.exp tony-xmlparse.opp.out)))
(rule (target tony-xmlparse.out) (deps ../good/tony-xmlparse.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias tony-xmlparse)
 (action (diff ../good/tony-xmlparse.exp tony-xmlparse.out)))
(rule (target touist.3.5.0-parser.opp.out)
 (deps ../good/touist.3.5.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias touist.3.5.0-parser)
 (action
  (diff ../good/touist.3.5.0-parser.opp.exp touist.3.5.0-parser.opp.out)))
(rule (target touist.3.5.0-parser.out) (deps ../good/touist.3.5.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias touist.3.5.0-parser)
 (action (diff ../good/touist.3.5.0-parser.exp touist.3.5.0-parser.out)))
(rule (target toy.opp.out) (deps ../good/toy.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias toy) (action (diff ../good/toy.opp.exp toy.opp.out)))
(rule (target toy.out) (deps ../good/toy.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias toy) (action (diff ../good/toy.exp toy.out)))
(rule (target tptp2cime.opp.out) (deps ../good/tptp2cime.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias tptp2cime)
 (action (diff ../good/tptp2cime.opp.exp tptp2cime.opp.out)))
(rule (target tptp2cime.out) (deps ../good/tptp2cime.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias tptp2cime) (action (diff ../good/tptp2cime.exp tptp2cime.out)))
(rule (target typage.opp.out) (deps ../good/typage.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias typage) (action (diff ../good/typage.opp.exp typage.opp.out)))
(rule (target typage.out) (deps ../good/typage.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias typage) (action (diff ../good/typage.exp typage.out)))
(rule (target typed-freshml.opp.out) (deps ../good/typed-freshml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias typed-freshml)
 (action (diff ../good/typed-freshml.opp.exp typed-freshml.opp.out)))
(rule (target typed-freshml.out) (deps ../good/typed-freshml.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias typed-freshml)
 (action (diff ../good/typed-freshml.exp typed-freshml.out)))
(rule (target undetermined_sort.opp.out) (deps ../good/undetermined_sort.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess
     %{read-lines:../good/undetermined_sort.flags} %{deps})))))
(rule (alias undetermined_sort)
 (action (diff ../good/undetermined_sort.opp.exp undetermined_sort.opp.out)))
(rule (target undetermined_sort.out) (deps ../good/undetermined_sort.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir %{read-lines:../good/undetermined_sort.flags} --explain -lg 2
     -la 2 -lc 2 %{deps})))))
(rule (alias undetermined_sort)
 (action (diff ../good/undetermined_sort.exp undetermined_sort.out)))
(rule (target unigram.opp.out) (deps ../good/unigram.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias unigram)
 (action (diff ../good/unigram.opp.exp unigram.opp.out)))
(rule (target unigram.out) (deps ../good/unigram.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias unigram) (action (diff ../good/unigram.exp unigram.out)))
(rule (target unreachable-symbol.opp.out)
 (deps ../good/unreachable-symbol.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias unreachable-symbol)
 (action
  (diff ../good/unreachable-symbol.opp.exp unreachable-symbol.opp.out)))
(rule (target unreachable-symbol.out) (deps ../good/unreachable-symbol.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias unreachable-symbol)
 (action (diff ../good/unreachable-symbol.exp unreachable-symbol.out)))
(rule (target unused-attribute.opp.out) (deps ../good/unused-attribute.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias unused-attribute)
 (action (diff ../good/unused-attribute.opp.exp unused-attribute.opp.out)))
(rule (target unused-attribute.out) (deps ../good/unused-attribute.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias unused-attribute)
 (action (diff ../good/unused-attribute.exp unused-attribute.out)))
(rule (target unused-pseudo-token.opp.out)
 (deps ../good/unused-pseudo-token.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias unused-pseudo-token)
 (action
  (diff ../good/unused-pseudo-token.opp.exp unused-pseudo-token.opp.out)))
(rule (target unused-pseudo-token.out) (deps ../good/unused-pseudo-token.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias unused-pseudo-token)
 (action (diff ../good/unused-pseudo-token.exp unused-pseudo-token.out)))
(rule (target unused-token1.opp.out) (deps ../good/unused-token1.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias unused-token1)
 (action (diff ../good/unused-token1.opp.exp unused-token1.opp.out)))
(rule (target unused-token1.out) (deps ../good/unused-token1.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias unused-token1)
 (action (diff ../good/unused-token1.exp unused-token1.out)))
(rule (target unused-value.opp.out) (deps ../good/unused-value.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias unused-value)
 (action (diff ../good/unused-value.opp.exp unused-value.opp.out)))
(rule (target unused-value.out) (deps ../good/unused-value.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias unused-value)
 (action (diff ../good/unused-value.exp unused-value.out)))
(rule (target uppercase.opp.out) (deps ../good/uppercase.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias uppercase)
 (action (diff ../good/uppercase.opp.exp uppercase.opp.out)))
(rule (target uppercase.out) (deps ../good/uppercase.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias uppercase) (action (diff ../good/uppercase.exp uppercase.out)))
(rule (target useless-priorities.opp.out)
 (deps ../good/useless-priorities.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias useless-priorities)
 (action
  (diff ../good/useless-priorities.opp.exp useless-priorities.opp.out)))
(rule (target useless-priorities.out) (deps ../good/useless-priorities.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias useless-priorities)
 (action (diff ../good/useless-priorities.exp useless-priorities.out)))
(rule (target useless-pseudo-token.opp.out)
 (deps ../good/useless-pseudo-token.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias useless-pseudo-token)
 (action
  (diff ../good/useless-pseudo-token.opp.exp useless-pseudo-token.opp.out)))
(rule (target useless-pseudo-token.out)
 (deps ../good/useless-pseudo-token.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias useless-pseudo-token)
 (action (diff ../good/useless-pseudo-token.exp useless-pseudo-token.out)))
(rule (target verilog.opp.out) (deps ../good/verilog.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias verilog)
 (action (diff ../good/verilog.opp.exp verilog.opp.out)))
(rule (target verilog.out) (deps ../good/verilog.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias verilog) (action (diff ../good/verilog.exp verilog.out)))
(rule (target wallace.opp.out) (deps ../good/wallace.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias wallace)
 (action (diff ../good/wallace.opp.exp wallace.opp.out)))
(rule (target wallace.out) (deps ../good/wallace.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias wallace) (action (diff ../good/wallace.exp wallace.out)))
(rule (target wasm.1.0-parser.opp.out) (deps ../good/wasm.1.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias wasm.1.0-parser)
 (action (diff ../good/wasm.1.0-parser.opp.exp wasm.1.0-parser.opp.out)))
(rule (target wasm.1.0-parser.out) (deps ../good/wasm.1.0-parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias wasm.1.0-parser)
 (action (diff ../good/wasm.1.0-parser.exp wasm.1.0-parser.out)))
(rule (target webidl.1.4-parser00.opp.out)
 (deps ../good/webidl.1.4-parser00.mly ../good/webidl.1.4-parser01.mly
  ../good/webidl.1.4-parser03.mly ../good/webidl.1.4-parser04.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --only-preprocess --base webidl.1.4-parser00 %{deps})))))
(rule (alias webidl.1.4-parser00)
 (action
  (diff ../good/webidl.1.4-parser00.opp.exp webidl.1.4-parser00.opp.out)))
(rule (target webidl.1.4-parser00.out)
 (deps ../good/webidl.1.4-parser00.mly ../good/webidl.1.4-parser01.mly
  ../good/webidl.1.4-parser03.mly ../good/webidl.1.4-parser04.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good
    (run menhir --base webidl.1.4-parser00 --explain -lg 2 -la 2 -lc 2
     %{deps})))))
(rule (alias webidl.1.4-parser00)
 (action (diff ../good/webidl.1.4-parser00.exp webidl.1.4-parser00.out)))
(rule (target why-clparser.opp.out) (deps ../good/why-clparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias why-clparser)
 (action (diff ../good/why-clparser.opp.exp why-clparser.opp.out)))
(rule (target why-clparser.out) (deps ../good/why-clparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias why-clparser)
 (action (diff ../good/why-clparser.exp why-clparser.out)))
(rule (target why-cparser.opp.out) (deps ../good/why-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias why-cparser)
 (action (diff ../good/why-cparser.opp.exp why-cparser.opp.out)))
(rule (target why-cparser.out) (deps ../good/why-cparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias why-cparser)
 (action (diff ../good/why-cparser.exp why-cparser.out)))
(rule (target why3.opp.out) (deps ../good/why3.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias why3) (action (diff ../good/why3.opp.exp why3.opp.out)))
(rule (target why3.out) (deps ../good/why3.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias why3) (action (diff ../good/why3.exp why3.out)))
(rule (target why3.1.1.0-py_parser.opp.out)
 (deps ../good/why3.1.1.0-py_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias why3.1.1.0-py_parser)
 (action
  (diff ../good/why3.1.1.0-py_parser.opp.exp why3.1.1.0-py_parser.opp.out)))
(rule (target why3.1.1.0-py_parser.out)
 (deps ../good/why3.1.1.0-py_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias why3.1.1.0-py_parser)
 (action (diff ../good/why3.1.1.0-py_parser.exp why3.1.1.0-py_parser.out)))
(rule (target xpath_parser.opp.out) (deps ../good/xpath_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias xpath_parser)
 (action (diff ../good/xpath_parser.opp.exp xpath_parser.opp.out)))
(rule (target xpath_parser.out) (deps ../good/xpath_parser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias xpath_parser)
 (action (diff ../good/xpath_parser.exp xpath_parser.out)))
(rule (target yann.opp.out) (deps ../good/yann.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias yann) (action (diff ../good/yann.opp.exp yann.opp.out)))
(rule (target yann.out) (deps ../good/yann.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias yann) (action (diff ../good/yann.exp yann.out)))
(rule (target yaparser.opp.out) (deps ../good/yaparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias yaparser)
 (action (diff ../good/yaparser.opp.exp yaparser.opp.out)))
(rule (target yaparser.out) (deps ../good/yaparser.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias yaparser) (action (diff ../good/yaparser.exp yaparser.out)))
(rule (target zenon.opp.out) (deps ../good/zenon.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias zenon) (action (diff ../good/zenon.opp.exp zenon.opp.out)))
(rule (target zenon.out) (deps ../good/zenon.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias zenon) (action (diff ../good/zenon.exp zenon.out)))
(rule (target zenon.0.8.4-parsecoq.opp.out)
 (deps ../good/zenon.0.8.4-parsecoq.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias zenon.0.8.4-parsecoq)
 (action
  (diff ../good/zenon.0.8.4-parsecoq.opp.exp zenon.0.8.4-parsecoq.opp.out)))
(rule (target zenon.0.8.4-parsecoq.out)
 (deps ../good/zenon.0.8.4-parsecoq.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias zenon.0.8.4-parsecoq)
 (action (diff ../good/zenon.0.8.4-parsecoq.exp zenon.0.8.4-parsecoq.out)))
(rule (target zipperposition.1.5-Parse_zf.opp.out)
 (deps ../good/zipperposition.1.5-Parse_zf.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias zipperposition.1.5-Parse_zf)
 (action
  (diff ../good/zipperposition.1.5-Parse_zf.opp.exp
   zipperposition.1.5-Parse_zf.opp.out)))
(rule (target zipperposition.1.5-Parse_zf.out)
 (deps ../good/zipperposition.1.5-Parse_zf.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias zipperposition.1.5-Parse_zf)
 (action
  (diff ../good/zipperposition.1.5-Parse_zf.exp
   zipperposition.1.5-Parse_zf.out)))
(rule (target zyvaall.opp.out) (deps ../good/zyvaall.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias zyvaall)
 (action (diff ../good/zyvaall.opp.exp zyvaall.opp.out)))
(rule (target zyvaall.out) (deps ../good/zyvaall.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias zyvaall) (action (diff ../good/zyvaall.exp zyvaall.out)))
(rule (target zyvaflo.opp.out) (deps ../good/zyvaflo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --only-preprocess %{deps})))))
(rule (alias zyvaflo)
 (action (diff ../good/zyvaflo.opp.exp zyvaflo.opp.out)))
(rule (target zyvaflo.out) (deps ../good/zyvaflo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../good (run menhir --explain -lg 2 -la 2 -lc 2 %{deps})))))
(rule (alias zyvaflo) (action (diff ../good/zyvaflo.exp zyvaflo.out)))
(rule (target arity-error.result) (deps ../bad/arity-error.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias arity-error)
 (action (diff ../bad/arity-error.expected arity-error.result)))
(rule (target arity-self.result) (deps ../bad/arity-self.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias arity-self)
 (action (diff ../bad/arity-self.expected arity-self.result)))
(rule (target arity-split.result) (deps ../bad/arity-split.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias arity-split)
 (action (diff ../bad/arity-split.expected arity-split.result)))
(rule (target bad-arity.result) (deps ../bad/bad-arity.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias bad-arity)
 (action (diff ../bad/bad-arity.expected bad-arity.result)))
(rule (target bad-dollar.result) (deps ../bad/bad-dollar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias bad-dollar)
 (action (diff ../bad/bad-dollar.expected bad-dollar.result)))
(rule (target calc-no-dollars.result) (deps ../bad/calc-no-dollars.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir %{read-lines:../bad/calc-no-dollars.flags} %{deps}))))))
(rule (alias calc-no-dollars)
 (action (diff ../bad/calc-no-dollars.expected calc-no-dollars.result)))
(rule (target constant-arity-in-multiple-def-1.result)
 (deps ../bad/constant-arity-in-multiple-def-1.mly
  ../bad/constant-arity-in-multiple-def-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base constant-arity-in-multiple-def-1 %{deps}))))))
(rule (alias constant-arity-in-multiple-def-1)
 (action
  (diff ../bad/constant-arity-in-multiple-def-1.expected
   constant-arity-in-multiple-def-1.result)))
(rule (target constant-inline-in-multiple-def-1.result)
 (deps ../bad/constant-inline-in-multiple-def-1.mly
  ../bad/constant-inline-in-multiple-def-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base constant-inline-in-multiple-def-1 %{deps}))))))
(rule (alias constant-inline-in-multiple-def-1)
 (action
  (diff ../bad/constant-inline-in-multiple-def-1.expected
   constant-inline-in-multiple-def-1.result)))
(rule (target cyclic-parameterized-definition.result)
 (deps ../bad/cyclic-parameterized-definition.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias cyclic-parameterized-definition)
 (action
  (diff ../bad/cyclic-parameterized-definition.expected
   cyclic-parameterized-definition.result)))
(rule (target declaration-error-a.result)
 (deps ../bad/declaration-error-a.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias declaration-error-a)
 (action
  (diff ../bad/declaration-error-a.expected declaration-error-a.result)))
(rule (target declaration-error-b.result)
 (deps ../bad/declaration-error-b.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias declaration-error-b)
 (action
  (diff ../bad/declaration-error-b.expected declaration-error-b.result)))
(rule (target dont-use-private-symbol-1.result)
 (deps ../bad/dont-use-private-symbol-1.mly
  ../bad/dont-use-private-symbol-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base dont-use-private-symbol-1 %{deps}))))))
(rule (alias dont-use-private-symbol-1)
 (action
  (diff ../bad/dont-use-private-symbol-1.expected
   dont-use-private-symbol-1.result)))
(rule (target double-equals.result) (deps ../bad/double-equals.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias double-equals)
 (action (diff ../bad/double-equals.expected double-equals.result)))
(rule (target duplicate-formal.result) (deps ../bad/duplicate-formal.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias duplicate-formal)
 (action (diff ../bad/duplicate-formal.expected duplicate-formal.result)))
(rule (target epsilon-cycle.result) (deps ../bad/epsilon-cycle.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias epsilon-cycle)
 (action (diff ../bad/epsilon-cycle.expected epsilon-cycle.result)))
(rule (target error-reserved.result) (deps ../bad/error-reserved.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias error-reserved)
 (action (diff ../bad/error-reserved.expected error-reserved.result)))
(rule (target expansion-capture.result) (deps ../bad/expansion-capture.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias expansion-capture)
 (action (diff ../bad/expansion-capture.expected expansion-capture.result)))
(rule (target forbidden-dollar.result) (deps ../bad/forbidden-dollar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias forbidden-dollar)
 (action (diff ../bad/forbidden-dollar.expected forbidden-dollar.result)))
(rule (target forbidden-dollar-bis.result)
 (deps ../bad/forbidden-dollar-bis.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias forbidden-dollar-bis)
 (action
  (diff ../bad/forbidden-dollar-bis.expected forbidden-dollar-bis.result)))
(rule (target forbidden-pos.result) (deps ../bad/forbidden-pos.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias forbidden-pos)
 (action (diff ../bad/forbidden-pos.expected forbidden-pos.result)))
(rule (target ill-sorted-attribute.result)
 (deps ../bad/ill-sorted-attribute.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias ill-sorted-attribute)
 (action
  (diff ../bad/ill-sorted-attribute.expected ill-sorted-attribute.result)))
(rule (target inline-attribute-def.result)
 (deps ../bad/inline-attribute-def.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias inline-attribute-def)
 (action
  (diff ../bad/inline-attribute-def.expected inline-attribute-def.result)))
(rule (target inline-attribute-use.result)
 (deps ../bad/inline-attribute-use.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias inline-attribute-use)
 (action
  (diff ../bad/inline-attribute-use.expected inline-attribute-use.result)))
(rule (target inline-cycle.result) (deps ../bad/inline-cycle.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias inline-cycle)
 (action (diff ../bad/inline-cycle.expected inline-cycle.result)))
(rule (target inline-cycle-complex.result)
 (deps ../bad/inline-cycle-complex.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias inline-cycle-complex)
 (action
  (diff ../bad/inline-cycle-complex.expected inline-cycle-complex.result)))
(rule (target inline-cycle-long.result) (deps ../bad/inline-cycle-long.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias inline-cycle-long)
 (action (diff ../bad/inline-cycle-long.expected inline-cycle-long.result)))
(rule (target inline-minimal-cycle.result)
 (deps ../bad/inline-minimal-cycle.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias inline-minimal-cycle)
 (action
  (diff ../bad/inline-minimal-cycle.expected inline-minimal-cycle.result)))
(rule (target invalid-declarations-a.result)
 (deps ../bad/invalid-declarations-a.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias invalid-declarations-a)
 (action
  (diff ../bad/invalid-declarations-a.expected invalid-declarations-a.result)))
(rule (target invalid-declarations-b.result)
 (deps ../bad/invalid-declarations-b.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias invalid-declarations-b)
 (action
  (diff ../bad/invalid-declarations-b.expected invalid-declarations-b.result)))
(rule (target invalid-declarations-c.result)
 (deps ../bad/invalid-declarations-c.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias invalid-declarations-c)
 (action
  (diff ../bad/invalid-declarations-c.expected invalid-declarations-c.result)))
(rule (target invalid-declarations-d.result)
 (deps ../bad/invalid-declarations-d.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias invalid-declarations-d)
 (action
  (diff ../bad/invalid-declarations-d.expected invalid-declarations-d.result)))
(rule (target invalid-declarations-e.result)
 (deps ../bad/invalid-declarations-e.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias invalid-declarations-e)
 (action
  (diff ../bad/invalid-declarations-e.expected invalid-declarations-e.result)))
(rule (target invalid-point-free-action.result)
 (deps ../bad/invalid-point-free-action.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias invalid-point-free-action)
 (action
  (diff ../bad/invalid-point-free-action.expected
   invalid-point-free-action.result)))
(rule (target invalid-token-in-prec.result)
 (deps ../bad/invalid-token-in-prec.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias invalid-token-in-prec)
 (action
  (diff ../bad/invalid-token-in-prec.expected invalid-token-in-prec.result)))
(rule (target jh.result) (deps ../bad/jh.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias jh) (action (diff ../bad/jh.expected jh.result)))
(rule (target jh-three.result) (deps ../bad/jh-three.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias jh-three)
 (action (diff ../bad/jh-three.expected jh-three.result)))
(rule (target jh-two.result) (deps ../bad/jh-two.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias jh-two) (action (diff ../bad/jh-two.expected jh-two.result)))
(rule (target join-param-1.result)
 (deps ../bad/join-param-1.mly ../bad/join-param-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base join-param-1 %{deps}))))))
(rule (alias join-param-1)
 (action (diff ../bad/join-param-1.expected join-param-1.result)))
(rule (target keyword.result) (deps ../bad/keyword.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias keyword) (action (diff ../bad/keyword.expected keyword.result)))
(rule (target keyword-in-header.result) (deps ../bad/keyword-in-header.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias keyword-in-header)
 (action (diff ../bad/keyword-in-header.expected keyword-in-header.result)))
(rule (target location-keyword-errors.result)
 (deps ../bad/location-keyword-errors.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias location-keyword-errors)
 (action
  (diff ../bad/location-keyword-errors.expected
   location-keyword-errors.result)))
(rule (target lots-of-errors-a.result) (deps ../bad/lots-of-errors-a.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias lots-of-errors-a)
 (action (diff ../bad/lots-of-errors-a.expected lots-of-errors-a.result)))
(rule (target lots-of-errors-b.result) (deps ../bad/lots-of-errors-b.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias lots-of-errors-b)
 (action (diff ../bad/lots-of-errors-b.expected lots-of-errors-b.result)))
(rule (target lots-of-errors-c.result) (deps ../bad/lots-of-errors-c.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias lots-of-errors-c)
 (action (diff ../bad/lots-of-errors-c.expected lots-of-errors-c.result)))
(rule (target lowercase-token.result) (deps ../bad/lowercase-token.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias lowercase-token)
 (action (diff ../bad/lowercase-token.expected lowercase-token.result)))
(rule (target missing-percentpercent.result)
 (deps ../bad/missing-percentpercent.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias missing-percentpercent)
 (action
  (diff ../bad/missing-percentpercent.expected missing-percentpercent.result)))
(rule (target multiple-precedence.result)
 (deps ../bad/multiple-precedence.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias multiple-precedence)
 (action
  (diff ../bad/multiple-precedence.expected multiple-precedence.result)))
(rule (target multiple-producers-with-same-name.result)
 (deps ../bad/multiple-producers-with-same-name.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias multiple-producers-with-same-name)
 (action
  (diff ../bad/multiple-producers-with-same-name.expected
   multiple-producers-with-same-name.result)))
(rule (target multiple-symbol-definition.result)
 (deps ../bad/multiple-symbol-definition.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias multiple-symbol-definition)
 (action
  (diff ../bad/multiple-symbol-definition.expected
   multiple-symbol-definition.result)))
(rule (target multiple-token.result) (deps ../bad/multiple-token.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias multiple-token)
 (action (diff ../bad/multiple-token.expected multiple-token.result)))
(rule (target multiple-type-definition.result)
 (deps ../bad/multiple-type-definition.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias multiple-type-definition)
 (action
  (diff ../bad/multiple-type-definition.expected
   multiple-type-definition.result)))
(rule (target multiple-type-definition-modules-1.result)
 (deps ../bad/multiple-type-definition-modules-1.mly
  ../bad/multiple-type-definition-modules-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base multiple-type-definition-modules-1 %{deps}))))))
(rule (alias multiple-type-definition-modules-1)
 (action
  (diff ../bad/multiple-type-definition-modules-1.expected
   multiple-type-definition-modules-1.result)))
(rule (target new-syntax-parentheses.result)
 (deps ../bad/new-syntax-parentheses.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias new-syntax-parentheses)
 (action
  (diff ../bad/new-syntax-parentheses.expected new-syntax-parentheses.result)))
(rule (target new-syntax-parentheses-bis.result)
 (deps ../bad/new-syntax-parentheses-bis.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias new-syntax-parentheses-bis)
 (action
  (diff ../bad/new-syntax-parentheses-bis.expected
   new-syntax-parentheses-bis.result)))
(rule (target no-start-and-inline.result)
 (deps ../bad/no-start-and-inline.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias no-start-and-inline)
 (action
  (diff ../bad/no-start-and-inline.expected no-start-and-inline.result)))
(rule (target no-start-symbol.result) (deps ../bad/no-start-symbol.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias no-start-symbol)
 (action (diff ../bad/no-start-symbol.expected no-start-symbol.result)))
(rule (target no-tokens.result) (deps ../bad/no-tokens.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias no-tokens)
 (action (diff ../bad/no-tokens.expected no-tokens.result)))
(rule (target non-terminal-multiple-branch-groups.result)
 (deps ../bad/non-terminal-multiple-branch-groups.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias non-terminal-multiple-branch-groups)
 (action
  (diff ../bad/non-terminal-multiple-branch-groups.expected
   non-terminal-multiple-branch-groups.result)))
(rule (target non-terminal-multiple-definitions.result)
 (deps ../bad/non-terminal-multiple-definitions.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias non-terminal-multiple-definitions)
 (action
  (diff ../bad/non-terminal-multiple-definitions.expected
   non-terminal-multiple-definitions.result)))
(rule (target non-terminals-tokens-overlap-1.result)
 (deps ../bad/non-terminals-tokens-overlap-1.mly
  ../bad/non-terminals-tokens-overlap-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base non-terminals-tokens-overlap-1 %{deps}))))))
(rule (alias non-terminals-tokens-overlap-1)
 (action
  (diff ../bad/non-terminals-tokens-overlap-1.expected
   non-terminals-tokens-overlap-1.result)))
(rule (target non-terminals-tokens-overlap-other-case-1.result)
 (deps ../bad/non-terminals-tokens-overlap-other-case-1.mly
  ../bad/non-terminals-tokens-overlap-other-case-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base non-terminals-tokens-overlap-other-case-1 %{deps}))))))
(rule (alias non-terminals-tokens-overlap-other-case-1)
 (action
  (diff ../bad/non-terminals-tokens-overlap-other-case-1.expected
   non-terminals-tokens-overlap-other-case-1.result)))
(rule (target non-terminals-tokens-overlap-simple.result)
 (deps ../bad/non-terminals-tokens-overlap-simple.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias non-terminals-tokens-overlap-simple)
 (action
  (diff ../bad/non-terminals-tokens-overlap-simple.expected
   non-terminals-tokens-overlap-simple.result)))
(rule (target nonlinear-pattern.result) (deps ../bad/nonlinear-pattern.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias nonlinear-pattern)
 (action (diff ../bad/nonlinear-pattern.expected nonlinear-pattern.result)))
(rule (target nonlinear-pattern-pun.result)
 (deps ../bad/nonlinear-pattern-pun.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias nonlinear-pattern-pun)
 (action
  (diff ../bad/nonlinear-pattern-pun.expected nonlinear-pattern-pun.result)))
(rule (target nonlinear-pattern-tuple.result)
 (deps ../bad/nonlinear-pattern-tuple.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias nonlinear-pattern-tuple)
 (action
  (diff ../bad/nonlinear-pattern-tuple.expected
   nonlinear-pattern-tuple.result)))
(rule (target nonsense.result) (deps ../bad/nonsense.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias nonsense)
 (action (diff ../bad/nonsense.expected nonsense.result)))
(rule (target not-well-founded-rec.result)
 (deps ../bad/not-well-founded-rec.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias not-well-founded-rec)
 (action
  (diff ../bad/not-well-founded-rec.expected not-well-founded-rec.result)))
(rule (target obc.result) (deps ../bad/obc.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias obc) (action (diff ../bad/obc.expected obc.result)))
(rule (target obscene-dollar.result) (deps ../bad/obscene-dollar.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias obscene-dollar)
 (action (diff ../bad/obscene-dollar.expected obscene-dollar.result)))
(rule (target ocaml-keyword.result) (deps ../bad/ocaml-keyword.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias ocaml-keyword)
 (action (diff ../bad/ocaml-keyword.expected ocaml-keyword.result)))
(rule (target occurs-check.result) (deps ../bad/occurs-check.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias occurs-check)
 (action (diff ../bad/occurs-check.expected occurs-check.result)))
(rule (target on-error-reduce-ill-kinded.result)
 (deps ../bad/on-error-reduce-ill-kinded.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias on-error-reduce-ill-kinded)
 (action
  (diff ../bad/on-error-reduce-ill-kinded.expected
   on-error-reduce-ill-kinded.result)))
(rule (target on-error-reduce-nonexistent.result)
 (deps ../bad/on-error-reduce-nonexistent.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias on-error-reduce-nonexistent)
 (action
  (diff ../bad/on-error-reduce-nonexistent.expected
   on-error-reduce-nonexistent.result)))
(rule (target on-error-reduce-nonexistent-argument.result)
 (deps ../bad/on-error-reduce-nonexistent-argument.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias on-error-reduce-nonexistent-argument)
 (action
  (diff ../bad/on-error-reduce-nonexistent-argument.expected
   on-error-reduce-nonexistent-argument.result)))
(rule (target option.result) (deps ../bad/option.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias option) (action (diff ../bad/option.expected option.result)))
(rule (target parameterized-start.result)
 (deps ../bad/parameterized-start.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias parameterized-start)
 (action
  (diff ../bad/parameterized-start.expected parameterized-start.result)))
(rule (target parameterized-start-weird.result)
 (deps ../bad/parameterized-start-weird.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias parameterized-start-weird)
 (action
  (diff ../bad/parameterized-start-weird.expected
   parameterized-start-weird.result)))
(rule (target parentheses.result) (deps ../bad/parentheses.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias parentheses)
 (action (diff ../bad/parentheses.expected parentheses.result)))
(rule (target positional-identifier-clash.result)
 (deps ../bad/positional-identifier-clash.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias positional-identifier-clash)
 (action
  (diff ../bad/positional-identifier-clash.expected
   positional-identifier-clash.result)))
(rule (target prec-inline-non-tail.result)
 (deps ../bad/prec-inline-non-tail.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias prec-inline-non-tail)
 (action
  (diff ../bad/prec-inline-non-tail.expected prec-inline-non-tail.result)))
(rule (target prec-inline-prec.result) (deps ../bad/prec-inline-prec.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias prec-inline-prec)
 (action (diff ../bad/prec-inline-prec.expected prec-inline-prec.result)))
(rule (target producer-with-a-positional-name.result)
 (deps ../bad/producer-with-a-positional-name.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias producer-with-a-positional-name)
 (action
  (diff ../bad/producer-with-a-positional-name.expected
   producer-with-a-positional-name.result)))
(rule (target production-group.result) (deps ../bad/production-group.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias production-group)
 (action (diff ../bad/production-group.expected production-group.result)))
(rule (target recursive-recognize.result)
 (deps ../bad/recursive-recognize.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias recursive-recognize)
 (action
  (diff ../bad/recursive-recognize.expected recursive-recognize.result)))
(rule (target reference-to-pseudo-token.result)
 (deps ../bad/reference-to-pseudo-token.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias reference-to-pseudo-token)
 (action
  (diff ../bad/reference-to-pseudo-token.expected
   reference-to-pseudo-token.result)))
(rule (target resync-on-action-prec.result)
 (deps ../bad/resync-on-action-prec.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias resync-on-action-prec)
 (action
  (diff ../bad/resync-on-action-prec.expected resync-on-action-prec.result)))
(rule (target rule-error.result) (deps ../bad/rule-error.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias rule-error)
 (action (diff ../bad/rule-error.expected rule-error.result)))
(rule (target sloc-with-param.result) (deps ../bad/sloc-with-param.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias sloc-with-param)
 (action (diff ../bad/sloc-with-param.expected sloc-with-param.result)))
(rule (target symbolstartpos-with-param.result)
 (deps ../bad/symbolstartpos-with-param.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias symbolstartpos-with-param)
 (action
  (diff ../bad/symbolstartpos-with-param.expected
   symbolstartpos-with-param.result)))
(rule (target syntax-let.result) (deps ../bad/syntax-let.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias syntax-let)
 (action (diff ../bad/syntax-let.expected syntax-let.result)))
(rule (target syntax-let-foo.result) (deps ../bad/syntax-let-foo.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias syntax-let-foo)
 (action (diff ../bad/syntax-let-foo.expected syntax-let-foo.result)))
(rule (target syntax-public-let.result) (deps ../bad/syntax-public-let.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias syntax-public-let)
 (action (diff ../bad/syntax-public-let.expected syntax-public-let.result)))
(rule (target terminal-type.result) (deps ../bad/terminal-type.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias terminal-type)
 (action (diff ../bad/terminal-type.expected terminal-type.result)))
(rule (target token-alias-clash.result) (deps ../bad/token-alias-clash.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias token-alias-clash)
 (action (diff ../bad/token-alias-clash.expected token-alias-clash.result)))
(rule (target token-has-multiple-definition.result)
 (deps ../bad/token-has-multiple-definition.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias token-has-multiple-definition)
 (action
  (diff ../bad/token-has-multiple-definition.expected
   token-has-multiple-definition.result)))
(rule (target token-has-multiple-definition-modules-1.result)
 (deps ../bad/token-has-multiple-definition-modules-1.mly
  ../bad/token-has-multiple-definition-modules-2.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad
    (with-accepted-exit-codes (not 0)
     (run menhir --base token-has-multiple-definition-modules-1 %{deps}))))))
(rule (alias token-has-multiple-definition-modules-1)
 (action
  (diff ../bad/token-has-multiple-definition-modules-1.expected
   token-has-multiple-definition-modules-1.result)))
(rule (target two-prec.result) (deps ../bad/two-prec.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias two-prec)
 (action (diff ../bad/two-prec.expected two-prec.result)))
(rule (target type-ill-kinded.result) (deps ../bad/type-ill-kinded.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias type-ill-kinded)
 (action (diff ../bad/type-ill-kinded.expected type-ill-kinded.result)))
(rule (target type-of-nonexistent-symbol.result)
 (deps ../bad/type-of-nonexistent-symbol.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias type-of-nonexistent-symbol)
 (action
  (diff ../bad/type-of-nonexistent-symbol.expected
   type-of-nonexistent-symbol.result)))
(rule (target unclosed-attribute.result) (deps ../bad/unclosed-attribute.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unclosed-attribute)
 (action (diff ../bad/unclosed-attribute.expected unclosed-attribute.result)))
(rule (target unclosed-attribute-variant.result)
 (deps ../bad/unclosed-attribute-variant.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unclosed-attribute-variant)
 (action
  (diff ../bad/unclosed-attribute-variant.expected
   unclosed-attribute-variant.result)))
(rule (target unclosed-brace.result) (deps ../bad/unclosed-brace.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unclosed-brace)
 (action (diff ../bad/unclosed-brace.expected unclosed-brace.result)))
(rule (target unclosed-brace-brace.result)
 (deps ../bad/unclosed-brace-brace.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unclosed-brace-brace)
 (action
  (diff ../bad/unclosed-brace-brace.expected unclosed-brace-brace.result)))
(rule (target unclosed-brace-paren.result)
 (deps ../bad/unclosed-brace-paren.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unclosed-brace-paren)
 (action
  (diff ../bad/unclosed-brace-paren.expected unclosed-brace-paren.result)))
(rule (target unclosed-prologue.result) (deps ../bad/unclosed-prologue.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unclosed-prologue)
 (action (diff ../bad/unclosed-prologue.expected unclosed-prologue.result)))
(rule (target undeclared-token-alias.result)
 (deps ../bad/undeclared-token-alias.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias undeclared-token-alias)
 (action
  (diff ../bad/undeclared-token-alias.expected undeclared-token-alias.result)))
(rule (target undefined-non-terminal-reference.result)
 (deps ../bad/undefined-non-terminal-reference.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias undefined-non-terminal-reference)
 (action
  (diff ../bad/undefined-non-terminal-reference.expected
   undefined-non-terminal-reference.result)))
(rule (target undefined-position.result) (deps ../bad/undefined-position.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias undefined-position)
 (action (diff ../bad/undefined-position.expected undefined-position.result)))
(rule (target undefined-producer.result) (deps ../bad/undefined-producer.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias undefined-producer)
 (action (diff ../bad/undefined-producer.expected undefined-producer.result)))
(rule (target undefined-start.result) (deps ../bad/undefined-start.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias undefined-start)
 (action (diff ../bad/undefined-start.expected undefined-start.result)))
(rule (target unification-error-at-toplevel.result)
 (deps ../bad/unification-error-at-toplevel.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unification-error-at-toplevel)
 (action
  (diff ../bad/unification-error-at-toplevel.expected
   unification-error-at-toplevel.result)))
(rule (target unification-error-in-args.result)
 (deps ../bad/unification-error-in-args.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unification-error-in-args)
 (action
  (diff ../bad/unification-error-in-args.expected
   unification-error-in-args.result)))
(rule (target unification-error-in-depth.result)
 (deps ../bad/unification-error-in-depth.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unification-error-in-depth)
 (action
  (diff ../bad/unification-error-in-depth.expected
   unification-error-in-depth.result)))
(rule (target unification-error-not-at-toplevel.result)
 (deps ../bad/unification-error-not-at-toplevel.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unification-error-not-at-toplevel)
 (action
  (diff ../bad/unification-error-not-at-toplevel.expected
   unification-error-not-at-toplevel.result)))
(rule (target unknown_symbol_in_attribute.result)
 (deps ../bad/unknown_symbol_in_attribute.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unknown_symbol_in_attribute)
 (action
  (diff ../bad/unknown_symbol_in_attribute.expected
   unknown_symbol_in_attribute.result)))
(rule (target unknown_symbol_in_on_error_reduce.result)
 (deps ../bad/unknown_symbol_in_on_error_reduce.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unknown_symbol_in_on_error_reduce)
 (action
  (diff ../bad/unknown_symbol_in_on_error_reduce.expected
   unknown_symbol_in_on_error_reduce.result)))
(rule (target unknown_symbol_in_type.result)
 (deps ../bad/unknown_symbol_in_type.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unknown_symbol_in_type)
 (action
  (diff ../bad/unknown_symbol_in_type.expected unknown_symbol_in_type.result)))
(rule (target unspecified-start.result) (deps ../bad/unspecified-start.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unspecified-start)
 (action (diff ../bad/unspecified-start.expected unspecified-start.result)))
(rule (target unspecified-start-type.result)
 (deps ../bad/unspecified-start-type.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias unspecified-start-type)
 (action
  (diff ../bad/unspecified-start-type.expected unspecified-start-type.result)))
(rule (target uppercase.result) (deps ../bad/uppercase.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias uppercase)
 (action (diff ../bad/uppercase.expected uppercase.result)))
(rule (target uppercase-start.result) (deps ../bad/uppercase-start.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias uppercase-start)
 (action (diff ../bad/uppercase-start.expected uppercase-start.result)))
(rule (target use-index-not-id.result) (deps ../bad/use-index-not-id.mly)
 (action
  (with-outputs-to %{target}
   (chdir ../bad (with-accepted-exit-codes (not 0) (run menhir %{deps}))))))
(rule (alias use-index-not-id)
 (action (diff ../bad/use-index-not-id.expected use-index-not-id.result)))
(alias (name test)
 (deps (alias JSParse) (alias K3Parser) (alias KaSim.4.0.0-kappaParser)
  (alias KaSim.4.0.0-kparser4) (alias albatross) (alias alphaCaml)
  (alias alphaCaml-demos-interactive) (alias alphaCaml-demos-mixins)
  (alias alphaCaml-demos-poplmark) (alias alphaprolog) (alias amalthea)
  (alias anonymous) (alias anonymous-nested) (alias anonymous-param)
  (alias anonymous-param-redundant) (alias apron.20160125-apron_parser)
  (alias arity-error) (alias arity-self) (alias arity-split)
  (alias atd_parser) (alias attapl-deptypes) (alias attapl-mini)
  (alias attributes) (alias attributes-expansion) (alias bad-arity)
  (alias bad-dollar) (alias bamboo.0.0.03-parser) (alias bare-bones)
  (alias batsh.0.0.6-parser_yacc) (alias bauer) (alias belloeil)
  (alias bibtex2html.1.99-bibtex_parser) (alias bibtex_parser)
  (alias bison-mysterious-conflict) (alias bodin) (alias bodin_inlined)
  (alias boomerang.1.1.0-bparser) (alias boris-mini)
  (alias boris-mini-no-eos) (alias bran) (alias c) (alias c_unambiguous)
  (alias calc) (alias calc-anonymous) (alias calc-ast) (alias calc-locations)
  (alias calc-never-useful) (alias calc-new-syntax) (alias calc-no-dollars)
  (alias camltemplate.1.0.2-ctParser) (alias camomile.1.0.1-colParser)
  (alias ccss.1.6-parser) (alias charrua-client.0.9-dhcp_parser)
  (alias christian) (alias cigen-cparser) (alias cil-cparser)
  (alias cil-formatparse) (alias cime-coq) (alias cime-genpoly)
  (alias cime-parameterized-signatures) (alias cime-poly)
  (alias cime-poly-interp) (alias cime-signature) (alias cime-syntax)
  (alias cime-term) (alias cime-terms) (alias cime-terms-signature)
  (alias cime-theory) (alias cime-toplevel) (alias cime-word) (alias cminor)
  (alias cocci) (alias coccinelle.1.0.2-parser_c)
  (alias coccinelle.1.0.2-parser_cocci_menhir) (alias coercion-constraint)
  (alias coercion-mini) (alias cohttp.1.2.0-accept_parser)
  (alias compcert_pre_parser) (alias compcert_pre_parser_new) (alias compsyn)
  (alias condition_parser) (alias confluence) (alias confluence-fnf)
  (alias confluence-psl) (alias constant-arity-in-multiple-def-1)
  (alias constant-inline-in-multiple-def-1) (alias couac)
  (alias cppo_ocamlbuild.1.6.0-cppo_parser) (alias cubicle.1.1.2-parser)
  (alias cudf.0.9-cudf_type_parser) (alias cutdown)
  (alias cyclic-parameterized-definition) (alias dario)
  (alias datalog.0.5.2-topDownParser) (alias dbforge.2.0.1-sqml_parser)
  (alias debian-formats.0.1.1-DF822_parser) (alias declaration-error-a)
  (alias declaration-error-b) (alias dedukti.2.6.0-menhir_parser)
  (alias diy.5.01-ARMParser) (alias dml) (alias dns.1.0.1-zone_parser)
  (alias doc-ock-xml.1.2.1-docOckXmlParser) (alias docOckXmlParser)
  (alias dolmen.0.2-parseDimacs) (alias dolmen.0.2-parseTptp)
  (alias dont-use-private-symbol-1) (alias double-equals) (alias dule)
  (alias dune.1.4.0-opamBaseParser) (alias duplicate-formal)
  (alias duplicated_prec) (alias efuns) (alias electrod.0.1.7-Parser)
  (alias electrum00) (alias empty-action) (alias end-of-stream-conflict)
  (alias epsilon-cycle) (alias error-reserved) (alias execparser)
  (alias expansion-capture) (alias featherweight) (alias fibonacci)
  (alias filiot) (alias flowcaml) (alias flowcaml-docgen)
  (alias focc-pure-def) (alias foo) (alias forbidden-dollar)
  (alias forbidden-dollar-bis) (alias forbidden-pos) (alias fork) (alias fp)
  (alias frama-c-base.20170501-logic_parser) (alias framac-cparser)
  (alias framac-print_api-grammar) (alias fsharp) (alias fslexpars)
  (alias fstar) (alias fstar.0.9.6.0~alpha1-parse) (alias fsyaccpars)
  (alias gdb.0.3-gdbmi_parser) (alias gettext.0.3.8-gettextPo_parser)
  (alias godiva) (alias gromit) (alias grune924)
  (alias heptagon.1.05.00-hept_parser) (alias herdtools7.7.51-AArch64Parser)
  (alias herdtools7.7.51-ARMParser) (alias herdtools7.7.51-CParser)
  (alias herdtools7.7.51-LISAParser) (alias herdtools7.7.51-PPCParser)
  (alias herdtools7.7.51-RISCVParser) (alias herdtools7.7.51-X86Parser)
  (alias herdtools7.7.51-modelParser) (alias herdtools7.7.51-stateParser)
  (alias hmx-multi) (alias hmx-sets) (alias ho) (alias htparser)
  (alias hydro.0.7.1-hgen_parser) (alias ibal) (alias ics) (alias idl_parser)
  (alias ill-sorted-attribute) (alias ilpars)
  (alias imaplet-lwt.0.1.9-parser) (alias infinite)
  (alias inline-attribute-def) (alias inline-attribute-use)
  (alias inline-cycle) (alias inline-cycle-complex) (alias inline-cycle-long)
  (alias inline-minimal-cycle) (alias inline-multi-level)
  (alias inline-multi-sons) (alias inline-position) (alias inline-rename)
  (alias inline-shift) (alias inline-test) (alias inline-with-dollar)
  (alias inlined-dollar) (alias inlining-capture)
  (alias inliningWithSideEffects) (alias invalid-declarations-a)
  (alias invalid-declarations-b) (alias invalid-declarations-c)
  (alias invalid-declarations-d) (alias invalid-declarations-e)
  (alias invalid-point-free-action) (alias invalid-token-in-prec)
  (alias jasmc) (alias java) (alias jh) (alias jh-three) (alias jh-two)
  (alias jingoo.1.2.9-jg_parser) (alias jml) (alias jocaml)
  (alias jocaml-ambients) (alias jocaml-new-parser) (alias join-param-1)
  (alias jparser) (alias js_of_ocaml.3.2.0-js_parser) (alias judicael)
  (alias julia) (alias ketti) (alias keyword) (alias keyword-in-header)
  (alias kimmit) (alias kremlin.0.9.6.0-parser) (alias labltk-compiler)
  (alias labltk-ppyac) (alias labrys.0.1-parser)
  (alias lambdapi.1.0-menhir_parser) (alias lambdoc_rlambtex_parser)
  (alias ldap.2.4.0-ldap_filterparser) (alias lem) (alias liberty_parser)
  (alias link) (alias links) (alias links.0.8-jsonparse)
  (alias links.0.8-parser) (alias links.0.8-xmlParser)
  (alias liquidsoap.1.3.4-lang_parser) (alias llparse)
  (alias location-keyword-errors) (alias logic_parser)
  (alias logtk.0.8.1-parse_theory) (alias loop) (alias lots-of-errors-a)
  (alias lots-of-errors-b) (alias lots-of-errors-c) (alias lowercase-token)
  (alias lr-but-not-lalr) (alias ltlparser) (alias lustre-v6.1.737-lv6parser)
  (alias lustreParser) (alias lutin.2.56-lutParser) (alias macrodown)
  (alias maple) (alias mcc-fc) (alias mcc-fj) (alias mcc-frontends)
  (alias mcc-mc) (alias mcc-moogle) (alias mcc-naml) (alias mcc-pascal)
  (alias mcc-pasqual) (alias mcc-phobos) (alias mcc-prof) (alias mcc-python)
  (alias memcad.1.0.0-mc_parser) (alias metaocaml) (alias mezzo)
  (alias miniCparser) (alias miniMLparser) (alias missing-percentpercent)
  (alias mlpost.0.8.2-pfb_parser) (alias modelica) (alias modelyze)
  (alias modulo) (alias morbig.0.9.1-parser) (alias mpri)
  (alias multi-token-alias-0) (alias multiple-functor)
  (alias multiple-precedence) (alias multiple-producers-with-same-name)
  (alias multiple-symbol-definition) (alias multiple-token)
  (alias multiple-type-definition) (alias multiple-type-definition-modules-1)
  (alias name-clash-1) (alias netsem) (alias new-syntax-parentheses)
  (alias new-syntax-parentheses-bis) (alias nexus) (alias nml-ip-parser)
  (alias no-end-of-stream-conflict) (alias no-start-and-inline)
  (alias no-start-symbol) (alias no-tokens) (alias no_future)
  (alias non-terminal-multiple-branch-groups)
  (alias non-terminal-multiple-definitions)
  (alias non-terminals-tokens-overlap-1)
  (alias non-terminals-tokens-overlap-other-case-1)
  (alias non-terminals-tokens-overlap-simple) (alias nonlinear-pattern)
  (alias nonlinear-pattern-pun) (alias nonlinear-pattern-tuple)
  (alias nonsense) (alias not-well-founded-rec) (alias nunchaku.0.6-Parser)
  (alias nunchaku.0.6-TPTP_parser) (alias nunchaku.0.6-Tip_parser)
  (alias obc) (alias obc-sym) (alias obelisk.0.3.2-zelus)
  (alias obscene-dollar) (alias ocaml)
  (alias ocaml-base-compiler.4.07.1-parsecmm) (alias ocaml-debugger)
  (alias ocaml-keyword) (alias ocaml-lex)
  (alias ocaml-protoc.1.2.0-pb_parsing_parser) (alias ocaml-test-Lex)
  (alias ocaml-testasmcomp-cmm) (alias ocaml_parser_menhir)
  (alias ocamldoc-odoc) (alias ocamldoc-odoc_text) (alias ocamlweb-yacc)
  (alias ocapic.3.3-parser) (alias occurs-check) (alias oclisp)
  (alias octavius.1.2.0-octParser) (alias odds.1.0-parser) (alias oflux)
  (alias ojacare) (alias ollvm.0.99-ollvm_parser)
  (alias omake.0.9.8.7-omake_shell_parse) (alias omake_ast_parse)
  (alias omake_shell_parse) (alias on-error-reduce-ill-kinded)
  (alias on-error-reduce-inlined) (alias on-error-reduce-nonexistent)
  (alias on-error-reduce-nonexistent-argument)
  (alias on-error-reduce-unreachable) (alias opam-doc.0.9.3-info_parser)
  (alias option) (alias option2) (alias options)
  (alias orpie.1.6.0-txtin_parser) (alias osdp.0.6.0-pa_parser) (alias pager)
  (alias pair-new-syntax) (alias parameterized-nonterminal)
  (alias parameterized-start) (alias parameterized-start-weird)
  (alias parentheses) (alias parse_xquery) (alias parser_cocci_menhir)
  (alias parser_cpp) (alias parser_css) (alias parser_java) (alias parser_js)
  (alias parser_php) (alias parser_raw) (alias permutation)
  (alias permutation-growth) (alias petit-1) (alias photos) (alias phpparser)
  (alias pippijn) (alias positional-identifier-clash) (alias pre_parser)
  (alias prec-inline-non-tail) (alias prec-inline-prec) (alias prec_inline)
  (alias private-and-public-1) (alias producer-with-a-positional-name)
  (alias production-group) (alias promelaparser)
  (alias promelaparser_withexps) (alias prooflang)
  (alias proverif.2.00-parser) (alias proverif.2.00-pitparser)
  (alias psmt2-frontend.0.1-smtlib_parser) (alias public-1)
  (alias public-inline-1) (alias pxp-m2parsergen) (alias pxp-ucs2_to_utf8)
  (alias rdf_sparql_parser) (alias reason.3.3.7-reason_parser)
  (alias reason_parser) (alias recursive-recognize)
  (alias reference-to-pseudo-token) (alias regstab.2.0.0-parser)
  (alias resync-on-action-prec) (alias rfsm.1.0-main_parser)
  (alias rml.1.09.05-parser) (alias ruby18_parser) (alias rule-error)
  (alias sage) (alias scilabParser) (alias self)
  (alias sibylfs-lem.0.4.0-parser) (alias simnml) (alias simple-if-conflict)
  (alias simple-if-conflict-no-eos) (alias sloc-with-param) (alias spike)
  (alias split-public-symbol) (alias split-public-symbol-with-renaming)
  (alias sqlgg.0.4.5-sql_parser) (alias statverif.1.97pl1.1-piparser)
  (alias subiso) (alias subtle-conflict-pager)
  (alias swdogen.0.1.0-swgparser) (alias symbolstartofs)
  (alias symbolstartpos) (alias symbolstartpos-with-param) (alias syntax-let)
  (alias syntax-let-foo) (alias syntax-public-let) (alias sysver)
  (alias talparser) (alias terminal-type) (alias tilde-used-warning)
  (alias token-alias-clash) (alias token-has-multiple-definition)
  (alias token-has-multiple-definition-modules-1) (alias tony-rc_parse)
  (alias tony-xmlparse) (alias touist.3.5.0-parser) (alias toy)
  (alias tptp2cime) (alias two-prec) (alias typage) (alias type-ill-kinded)
  (alias type-of-nonexistent-symbol) (alias typed-freshml)
  (alias unclosed-attribute) (alias unclosed-attribute-variant)
  (alias unclosed-brace) (alias unclosed-brace-brace)
  (alias unclosed-brace-paren) (alias unclosed-prologue)
  (alias undeclared-token-alias) (alias undefined-non-terminal-reference)
  (alias undefined-position) (alias undefined-producer)
  (alias undefined-start) (alias undetermined_sort)
  (alias unification-error-at-toplevel) (alias unification-error-in-args)
  (alias unification-error-in-depth)
  (alias unification-error-not-at-toplevel) (alias unigram)
  (alias unknown_symbol_in_attribute)
  (alias unknown_symbol_in_on_error_reduce) (alias unknown_symbol_in_type)
  (alias unreachable-symbol) (alias unspecified-start)
  (alias unspecified-start-type) (alias unused-attribute)
  (alias unused-pseudo-token) (alias unused-token1) (alias unused-value)
  (alias uppercase) (alias uppercase-start) (alias use-index-not-id)
  (alias useless-priorities) (alias useless-pseudo-token) (alias verilog)
  (alias wallace) (alias wasm.1.0-parser) (alias webidl.1.4-parser00)
  (alias why-clparser) (alias why-cparser) (alias why3)
  (alias why3.1.1.0-py_parser) (alias xpath_parser) (alias yann)
  (alias yaparser) (alias zenon) (alias zenon.0.8.4-parsecoq)
  (alias zipperposition.1.5-Parse_zf) (alias zyvaall) (alias zyvaflo)))
